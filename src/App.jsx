import React, { useState, useEffect } from 'react';
import { useTranslation } from 'react-i18next';
import { useNavigate } from 'react-router-dom';
import PaitentApp from './PatientApp';
import {
  Users, Stethoscope, FileText, Heart, Settings, LogOut,
  Calendar, Bell, Menu, X, Search, Mic, Video, Camera,
  MessageCircle, BookOpen, UserPlus, Download, Upload,
  Languages, AlertTriangle, Pill, Clock, MapPin, ChevronRight,
  Plus, Filter, MoreVertical, Play, StopCircle, Send,
  Shield, ArrowRight, CheckCircle, Trash2, Edit3,
  Star, TrendingUp, Activity, Phone, Mail, Map, Edit3,
  Book, HelpCircle, Mic2, Volume2, FileDown, Share2,
  User, Home, ClipboardList, MessageSquare, CheckCircle, AlertCircle, XCircle, Paperclip, Trash2,
  Key, Users as UsersIcon, FolderPlus
} from 'lucide-react';
import './App.css';
// Login Component
const handleHealthRecord = () => {
  window.open("https://health-form-henna.vercel.app/", "_blank");
  // "_blank" ‚Üí opens in new tab
  // "_self" ‚Üí opens in same tab
};
const translations = {
  en: {
    // Existing
    dashboard: "Dashboard",
    updateHealthRecord: "Update Health Record",
    registerPatient: "Register Patient",
    generateFamilyId: "Generate Family ID",
    updateFamilyRecords: "Update Family Records",
    symptomCheck: "AI Chatbot",
    medicineStock: "Medicine Stock",
    healthLibrary: "Health Library",
    visitSchedule: "Visit Schedule",
    settings: "Settings",
    logout: "Logout",
    welcome: "Namaste, {name}! üëã",
    dedication: "Your dedication to community health is making a difference every day.",
    totalPatients: "Total Patients",
    activeCases: "Active Tasks",
    completedVisits: "Completed Visits",
    pendingTasks: "Pending Tasks",
    quickActions: "Quick Actions",
    searchPlaceholder: "Search patients, records...",
    // Login
    appTitle: "AshaConnect",
    loginTitle: "ASHA Worker Login",
    loginSubtitle: "Enter your credentials to access the portal",
    errorBoth: "Please enter both ASHA ID and Date of Birth",
    errorId: "Please enter a valid ASHA ID",
    labelAshaId: "ASHA Worker ID",
    placeholderAshaId: "Enter your ASHA ID",
    labelDob: "Date of Birth",
    loginButton: "Login to Portal",
    helpText: "Need help? Contact your supervisor",
    // Family ID Generator
    familyTitle: "Generate Family ID",
    familySubtitle: "Create a unique family ID to link family members together",
    headLabel: "Head of Family Patient ID *",
    headPlaceholder: "Enter patient ID of family head",
    membersTitle: "Family Members",
    addMember: "Add Member",
    patientIdLabel: "Patient ID",
    patientIdPlaceholder: "Enter patient ID",
    relationLabel: "Relation to Head",
    relationPlaceholder: "Select Relation",
    relationSpouse: "Spouse",
    relationChild: "Child",
    relationParent: "Parent",
    relationSibling: "Sibling",
    relationGrandchild: "Grandchild",
    relationOther: "Other",
    generateButton: "Generate Family ID",
    generatedTitle: "Generated Family ID",
    copyButton: "Copy ID",
    noteText: "Note: Share this Family ID with all family members for linking their records.",
    alertHeadId: "Please enter Head of Family Patient ID",
    // Update Family Records
    updateFamilyTitle: "Update Family Records",
    updateFamilySubtitle: "Update health records for entire family using Family ID",
    familyIdPlaceholder: "Enter Family ID",
    searchFamily: "Search Family",
    familyHeader: "Family: ",
    membersCount: " Members",
    headRole: "(Head)",
    patientInfo: "Patient ID: {id} ‚Ä¢ {age} years ‚Ä¢ {gender}",
    bpLabel: "Blood Pressure",
    bpPlaceholder: "e.g., 120/80",
    sugarLabel: "Blood Sugar",
    sugarPlaceholder: "e.g., 120 mg/dL",
    weightLabel: "Weight",
    weightPlaceholder: "e.g., 65 kg",
    updateAll: "Update All Records",
    alertFamilyId: "Please enter a Family ID",
    successUpdate: "Family records updated successfully!",
    // Chatbot
    chatHeader: "AI Chatbot",
    statusOnline: "Online",
    statusOffline: "Offline",
    chatPlaceholder: "Describe your symptoms in English or Hindi...",
    disclaimer: "‚ö†Ô∏è This is not medical advice. Consult a healthcare professional.",
    speakerPlay: "Listen to this message",
    speakerStop: "Stop playback",
    micTitle: "Speak in Hindi",
    sendIcon: "‚û§",
    speechNotSupported: "Speech recognition is not supported in your browser. Please use Chrome or Edge.",
    ttsNotSupported: "Text-to-speech is not supported in your browser.",
    audioError: "Error playing audio. Please try again.",
    // Medicine Tracker
    phcTitle: "PHC Medicine Stock",
    phcSubtitle: "Check medicine availability at government pharmacy",
    searchMedicines: "Search medicines...",
    filterAll: "All",
    filterLow: "Low Stock",
    filterAdequate: "Adequate",
    statusGood: "Adequate",
    statusMedium: "Moderate",
    statusLow: "Low Stock",
    requestMore: "Request More",
    reportIssue: "Report Issue",
    // Health Library
    libraryTitle: "Health Education Library",
    librarySubtitle: "Access educational resources for patient care",
    filterAllTopics: "All Topics",
    filterMaternal: "Maternal Health",
    filterChild: "Child Care",
    filterChronic: "Chronic Diseases",
    readMore: "Read More",
    // Schedule
    scheduleTitle: "ASHA Work Schedule",
    filterToday: "Today's Tasks",
    filterUpcoming: "Upcoming",
    homeVisit: "Home Visit",
    vaccinationDrive: "Vaccination Drive",
    healthCamp: "Health Camp",
    followUp: "Follow-up Visit",
    completed: "Completed",
    pending: "Pending",
    tasksPerformed: "Tasks to be performed:",
    markComplete: "Mark Complete",
    reschedule: "Reschedule",
    noTasksTitle: "No tasks scheduled",
    noTasksSubtitle: "No tasks scheduled for this period",
    todayTasks: "Today's Tasks",
    highPriority: "High Priority",
    // Notifications
    notifTitle: "Notifications",
    notifSubtitle: "Your recent alerts and updates",
    // Bottom Nav
    home: "Home",
    records: "Records",
    familyIdNav: "Family ID",
    scheduleNav: "Schedule",
    // Quick Actions Subtitles
    registerPatientSub: "Add new patient to your care",
    symptomCheckSub: "AI-powered health assessment",
    medicineStockSub: "Check PHC medicine availability",
    updateHealthRecordSub: "Update patient health information",
    generateFamilyIdSub: "Create family group for records",
    healthLibrarySub: "Access educational resources and official PHC videos",
    // Welcome Actions
    registerNewPatient: "Register New Patient",
    updateHealthRecords: "Update Health Records"
  },
  hi: {
    // Existing
    dashboard: "‡§°‡•à‡§∂‡§¨‡•ã‡§∞‡•ç‡§°",
    updateHealthRecord: "‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§∞‡§ø‡§ï‡•â‡§∞‡•ç‡§° ‡§Ö‡§™‡§°‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç",
    registerPatient: "‡§Æ‡§∞‡•Ä‡§ú ‡§™‡§Ç‡§ú‡•Ä‡§ï‡§∞‡§£",
    generateFamilyId: "‡§™‡§∞‡§ø‡§µ‡§æ‡§∞ ‡§Ü‡§à‡§°‡•Ä ‡§ú‡§®‡§∞‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç",
    updateFamilyRecords: "‡§™‡§∞‡§ø‡§µ‡§æ‡§∞ ‡§∞‡§ø‡§ï‡•â‡§∞‡•ç‡§° ‡§Ö‡§™‡§°‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç",
    symptomCheck: "‡§è‡§Ü‡§à ‡§ö‡•à‡§ü‡§¨‡•â‡§ü",
    medicineStock: "‡§¶‡§µ‡§æ ‡§∏‡•ç‡§ü‡•â‡§ï",
    healthLibrary: "‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§≤‡§æ‡§á‡§¨‡•ç‡§∞‡•á‡§∞‡•Ä",
    visitSchedule: "‡§Ø‡§æ‡§§‡•ç‡§∞‡§æ ‡§ï‡§æ‡§∞‡•ç‡§Ø‡§ï‡•ç‡§∞‡§Æ",
    settings: "‡§∏‡•á‡§ü‡§ø‡§Ç‡§ó‡•ç‡§∏",
    logout: "‡§≤‡•â‡§ó‡§Ü‡§â‡§ü",
    welcome: "‡§®‡§Æ‡§∏‡•ç‡§§‡•á, {name}! üëã",
    dedication: "‡§∏‡§Æ‡•Å‡§¶‡§æ‡§Ø ‡§ï‡•á ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§ï‡•á ‡§™‡•ç‡§∞‡§§‡§ø ‡§Ü‡§™‡§ï‡§æ ‡§∏‡§Æ‡§∞‡•ç‡§™‡§£ ‡§π‡§∞ ‡§¶‡§ø‡§® ‡§¨‡§¶‡§≤‡§æ‡§µ ‡§≤‡§æ ‡§∞‡§π‡§æ ‡§π‡•à‡•§",
    totalPatients: "‡§ï‡•Å‡§≤ ‡§Æ‡§∞‡•Ä‡§ú",
    activeCases: "‡§∏‡§ï‡•ç‡§∞‡§ø‡§Ø ‡§Æ‡§æ‡§Æ‡§≤‡•á",
    completedVisits: "‡§™‡•Ç‡§∞‡•ç‡§£ ‡§Ø‡§æ‡§§‡•ç‡§∞‡§æ‡§è‡§Ç",
    pendingTasks: "‡§≤‡§Ç‡§¨‡§ø‡§§ ‡§ï‡§æ‡§∞‡•ç‡§Ø",
    quickActions: "‡§§‡•ç‡§µ‡§∞‡§ø‡§§ ‡§ï‡§æ‡§∞‡•ç‡§Ø",
    searchPlaceholder: "‡§Æ‡§∞‡•Ä‡§ú, ‡§∞‡§ø‡§ï‡•â‡§∞‡•ç‡§° ‡§ñ‡•ã‡§ú‡•á‡§Ç...",
    // Login
    appTitle: "‡§ö‡§ø‡§ï‡§ø‡§§‡•ç‡§∏‡§æ365",
    loginTitle: "‡§Ü‡§∂‡§æ ‡§ï‡§æ‡§∞‡•ç‡§Ø‡§ï‡§∞‡•ç‡§§‡§æ ‡§≤‡•â‡§ó‡§ø‡§®",
    loginSubtitle: "‡§™‡•ã‡§∞‡•ç‡§ü‡§≤ ‡§§‡§ï ‡§™‡§π‡•Å‡§Ç‡§ö‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ö‡§™‡§®‡•Ä ‡§∏‡§æ‡§ñ ‡§¶‡§∞‡•ç‡§ú ‡§ï‡§∞‡•á‡§Ç",
    errorBoth: "‡§ï‡•É‡§™‡§Ø‡§æ ‡§Ü‡§∂‡§æ ‡§Ü‡§à‡§°‡•Ä ‡§î‡§∞ ‡§ú‡§®‡•ç‡§Æ ‡§§‡§ø‡§•‡§ø ‡§¶‡•ã‡§®‡•ã‡§Ç ‡§¶‡§∞‡•ç‡§ú ‡§ï‡§∞‡•á‡§Ç",
    errorId: "‡§ï‡•É‡§™‡§Ø‡§æ ‡§µ‡•à‡§ß ‡§Ü‡§∂‡§æ ‡§Ü‡§à‡§°‡•Ä ‡§¶‡§∞‡•ç‡§ú ‡§ï‡§∞‡•á‡§Ç",
    labelAshaId: "‡§Ü‡§∂‡§æ ‡§ï‡§æ‡§∞‡•ç‡§Ø‡§ï‡§∞‡•ç‡§§‡§æ ‡§Ü‡§à‡§°‡•Ä",
    placeholderAshaId: "‡§Ö‡§™‡§®‡•Ä ‡§Ü‡§∂‡§æ ‡§Ü‡§à‡§°‡•Ä ‡§¶‡§∞‡•ç‡§ú ‡§ï‡§∞‡•á‡§Ç",
    labelDob: "‡§ú‡§®‡•ç‡§Æ ‡§§‡§ø‡§•‡§ø",
    loginButton: "‡§™‡•ã‡§∞‡•ç‡§ü‡§≤ ‡§Æ‡•á‡§Ç ‡§≤‡•â‡§ó‡§ø‡§® ‡§ï‡§∞‡•á‡§Ç",
    helpText: "‡§Æ‡§¶‡§¶ ‡§ö‡§æ‡§π‡§ø‡§è? ‡§Ö‡§™‡§®‡•á ‡§™‡§∞‡•ç‡§Ø‡§µ‡•á‡§ï‡•ç‡§∑‡§ï ‡§∏‡•á ‡§∏‡§Ç‡§™‡§∞‡•ç‡§ï ‡§ï‡§∞‡•á‡§Ç",
    // Family ID Generator
    familyTitle: "‡§™‡§∞‡§ø‡§µ‡§æ‡§∞ ‡§Ü‡§à‡§°‡•Ä ‡§ú‡§®‡§∞‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç",
    familySubtitle: "‡§™‡§∞‡§ø‡§µ‡§æ‡§∞ ‡§ï‡•á ‡§∏‡§¶‡§∏‡•ç‡§Ø‡•ã‡§Ç ‡§ï‡•ã ‡§ú‡•ã‡§°‡§º‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ö‡§¶‡•ç‡§µ‡§ø‡§§‡•Ä‡§Ø ‡§™‡§∞‡§ø‡§µ‡§æ‡§∞ ‡§Ü‡§à‡§°‡•Ä ‡§¨‡§®‡§æ‡§è‡§Ç",
    headLabel: "‡§™‡§∞‡§ø‡§µ‡§æ‡§∞ ‡§ï‡•á ‡§Æ‡•Å‡§ñ‡§ø‡§Ø‡§æ ‡§ï‡§æ ‡§Æ‡§∞‡•Ä‡§ú ‡§Ü‡§à‡§°‡•Ä *",
    headPlaceholder: "‡§™‡§∞‡§ø‡§µ‡§æ‡§∞ ‡§ï‡•á ‡§Æ‡•Å‡§ñ‡§ø‡§Ø‡§æ ‡§ï‡§æ ‡§Æ‡§∞‡•Ä‡§ú ‡§Ü‡§à‡§°‡•Ä ‡§¶‡§∞‡•ç‡§ú ‡§ï‡§∞‡•á‡§Ç",
    membersTitle: "‡§™‡§∞‡§ø‡§µ‡§æ‡§∞ ‡§ï‡•á ‡§∏‡§¶‡§∏‡•ç‡§Ø",
    addMember: "‡§∏‡§¶‡§∏‡•ç‡§Ø ‡§ú‡•ã‡§°‡§º‡•á‡§Ç",
    patientIdLabel: "‡§Æ‡§∞‡•Ä‡§ú ‡§Ü‡§à‡§°‡•Ä",
    patientIdPlaceholder: "‡§Æ‡§∞‡•Ä‡§ú ‡§Ü‡§à‡§°‡•Ä ‡§¶‡§∞‡•ç‡§ú ‡§ï‡§∞‡•á‡§Ç",
    relationLabel: "‡§Æ‡•Å‡§ñ‡§ø‡§Ø‡§æ ‡§∏‡•á ‡§∏‡§Ç‡§¨‡§Ç‡§ß",
    relationPlaceholder: "‡§∏‡§Ç‡§¨‡§Ç‡§ß ‡§ö‡•Å‡§®‡•á‡§Ç",
    relationSpouse: "‡§™‡§§‡§ø/‡§™‡§§‡•ç‡§®‡•Ä",
    relationChild: "‡§¨‡§ö‡•ç‡§ö‡§æ",
    relationParent: "‡§Æ‡§æ‡§§‡§æ-‡§™‡§ø‡§§‡§æ",
    relationSibling: "‡§≠‡§æ‡§à-‡§¨‡§π‡§®",
    relationGrandchild: "‡§™‡•ã‡§§‡§æ/‡§™‡•ã‡§§‡•Ä",
    relationOther: "‡§Ö‡§®‡•ç‡§Ø",
    generateButton: "‡§™‡§∞‡§ø‡§µ‡§æ‡§∞ ‡§Ü‡§à‡§°‡•Ä ‡§ú‡§®‡§∞‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç",
    generatedTitle: "‡§ú‡§®‡§∞‡•á‡§ü ‡§ï‡•Ä ‡§ó‡§à ‡§™‡§∞‡§ø‡§µ‡§æ‡§∞ ‡§Ü‡§à‡§°‡•Ä",
    copyButton: "‡§Ü‡§à‡§°‡•Ä ‡§ï‡•â‡§™‡•Ä ‡§ï‡§∞‡•á‡§Ç",
    noteText: "‡§®‡•ã‡§ü: ‡§∞‡§ø‡§ï‡•â‡§∞‡•ç‡§° ‡§≤‡§ø‡§Ç‡§ï ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§á‡§∏ ‡§™‡§∞‡§ø‡§µ‡§æ‡§∞ ‡§Ü‡§à‡§°‡•Ä ‡§ï‡•ã ‡§∏‡§≠‡•Ä ‡§™‡§∞‡§ø‡§µ‡§æ‡§∞ ‡§ï‡•á ‡§∏‡§¶‡§∏‡•ç‡§Ø‡•ã‡§Ç ‡§ï‡•á ‡§∏‡§æ‡§• ‡§∏‡§æ‡§ù‡§æ ‡§ï‡§∞‡•á‡§Ç‡•§",
    alertHeadId: "‡§ï‡•É‡§™‡§Ø‡§æ ‡§™‡§∞‡§ø‡§µ‡§æ‡§∞ ‡§ï‡•á ‡§Æ‡•Å‡§ñ‡§ø‡§Ø‡§æ ‡§ï‡§æ ‡§Æ‡§∞‡•Ä‡§ú ‡§Ü‡§à‡§°‡•Ä ‡§¶‡§∞‡•ç‡§ú ‡§ï‡§∞‡•á‡§Ç",
    // Update Family Records
    updateFamilyTitle: "‡§™‡§∞‡§ø‡§µ‡§æ‡§∞ ‡§∞‡§ø‡§ï‡•â‡§∞‡•ç‡§° ‡§Ö‡§™‡§°‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç",
    updateFamilySubtitle: "‡§™‡§∞‡§ø‡§µ‡§æ‡§∞ ‡§Ü‡§à‡§°‡•Ä ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡§ï‡•á ‡§™‡•Ç‡§∞‡•á ‡§™‡§∞‡§ø‡§µ‡§æ‡§∞ ‡§ï‡•á ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§∞‡§ø‡§ï‡•â‡§∞‡•ç‡§° ‡§Ö‡§™‡§°‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç",
    familyIdPlaceholder: "‡§™‡§∞‡§ø‡§µ‡§æ‡§∞ ‡§Ü‡§à‡§°‡•Ä ‡§¶‡§∞‡•ç‡§ú ‡§ï‡§∞‡•á‡§Ç",
    searchFamily: "‡§™‡§∞‡§ø‡§µ‡§æ‡§∞ ‡§ñ‡•ã‡§ú‡•á‡§Ç",
    familyHeader: "‡§™‡§∞‡§ø‡§µ‡§æ‡§∞: ",
    membersCount: " ‡§∏‡§¶‡§∏‡•ç‡§Ø",
    headRole: "(‡§Æ‡•Å‡§ñ‡§ø‡§Ø‡§æ)",
    patientInfo: "‡§Æ‡§∞‡•Ä‡§ú ‡§Ü‡§à‡§°‡•Ä: {id} ‚Ä¢ {age} ‡§µ‡§∞‡•ç‡§∑ ‚Ä¢ {gender}",
    bpLabel: "‡§∞‡§ï‡•ç‡§§‡§ö‡§æ‡§™",
    bpPlaceholder: "‡§â‡§¶‡§æ‡§π‡§∞‡§£, 120/80",
    sugarLabel: "‡§∞‡§ï‡•ç‡§§ ‡§∂‡§∞‡•ç‡§ï‡§∞‡§æ",
    sugarPlaceholder: "‡§â‡§¶‡§æ‡§π‡§∞‡§£, 120 mg/dL",
    weightLabel: "‡§µ‡§ú‡§®",
    weightPlaceholder: "‡§â‡§¶‡§æ‡§π‡§∞‡§£, 65 kg",
    updateAll: "‡§∏‡§≠‡•Ä ‡§∞‡§ø‡§ï‡•â‡§∞‡•ç‡§° ‡§Ö‡§™‡§°‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç",
    alertFamilyId: "‡§ï‡•É‡§™‡§Ø‡§æ ‡§™‡§∞‡§ø‡§µ‡§æ‡§∞ ‡§Ü‡§à‡§°‡•Ä ‡§¶‡§∞‡•ç‡§ú ‡§ï‡§∞‡•á‡§Ç",
    successUpdate: "‡§™‡§∞‡§ø‡§µ‡§æ‡§∞ ‡§∞‡§ø‡§ï‡•â‡§∞‡•ç‡§° ‡§∏‡§´‡§≤‡§§‡§æ‡§™‡•Ç‡§∞‡•ç‡§µ‡§ï ‡§Ö‡§™‡§°‡•á‡§ü ‡§π‡•ã ‡§ó‡§è!",
    // Chatbot
    chatHeader: "‡§è‡§Ü‡§à ‡§ö‡•à‡§ü‡§¨‡•â‡§ü",
    statusOnline: "‡§ë‡§®‡§≤‡§æ‡§á‡§®",
    statusOffline: "‡§ë‡§´‡§≤‡§æ‡§á‡§®",
    chatPlaceholder: "‡§Ö‡§™‡§®‡•á ‡§≤‡§ï‡•ç‡§∑‡§£‡•ã‡§Ç ‡§ï‡§æ ‡§µ‡§∞‡•ç‡§£‡§® ‡§Ö‡§Ç‡§ó‡•ç‡§∞‡•á‡§ú‡•Ä ‡§Ø‡§æ ‡§π‡§ø‡§Ç‡§¶‡•Ä ‡§Æ‡•á‡§Ç ‡§ï‡§∞‡•á‡§Ç...",
    disclaimer: "‚ö†Ô∏è ‡§Ø‡§π ‡§ö‡§ø‡§ï‡§ø‡§§‡•ç‡§∏‡§æ ‡§∏‡§≤‡§æ‡§π ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à‡•§ ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§™‡•á‡§∂‡•á‡§µ‡§∞ ‡§∏‡•á ‡§™‡§∞‡§æ‡§Æ‡§∞‡•ç‡§∂ ‡§ï‡§∞‡•á‡§Ç‡•§",
    speakerPlay: "‡§á‡§∏ ‡§∏‡§Ç‡§¶‡•á‡§∂ ‡§ï‡•ã ‡§∏‡•Å‡§®‡•á‡§Ç",
    speakerStop: "‡§™‡•ç‡§≤‡•á‡§¨‡•à‡§ï ‡§∞‡•ã‡§ï‡•á‡§Ç",
    micTitle: "‡§π‡§ø‡§Ç‡§¶‡•Ä ‡§Æ‡•á‡§Ç ‡§¨‡•ã‡§≤‡•á‡§Ç",
    sendIcon: "‚û§",
    speechNotSupported: "‡§Ü‡§™‡§ï‡•á ‡§¨‡•ç‡§∞‡§æ‡§â‡§ú‡§º‡§∞ ‡§Æ‡•á‡§Ç ‡§∏‡•ç‡§™‡•Ä‡§ö ‡§∞‡§ø‡§ï‡§ó‡•ç‡§®‡§ø‡§∂‡§® ‡§∏‡§Æ‡§∞‡•ç‡§•‡§ø‡§§ ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§ï‡•ç‡§∞‡•ã‡§Æ ‡§Ø‡§æ ‡§è‡§ú ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡•á‡§Ç‡•§",
    ttsNotSupported: "‡§Ü‡§™‡§ï‡•á ‡§¨‡•ç‡§∞‡§æ‡§â‡§ú‡§º‡§∞ ‡§Æ‡•á‡§Ç ‡§ü‡•á‡§ï‡•ç‡§∏‡•ç‡§ü-‡§ü‡•Ç-‡§∏‡•ç‡§™‡•Ä‡§ö ‡§∏‡§Æ‡§∞‡•ç‡§•‡§ø‡§§ ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à‡•§",
    audioError: "‡§ë‡§°‡§ø‡§Ø‡•ã ‡§ö‡§≤‡§æ‡§®‡•á ‡§Æ‡•á‡§Ç ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§™‡•Å‡§®‡§É ‡§™‡•ç‡§∞‡§Ø‡§æ‡§∏ ‡§ï‡§∞‡•á‡§Ç‡•§",
    // Medicine Tracker
    phcTitle: "‡§™‡•Ä‡§è‡§ö‡§∏‡•Ä ‡§¶‡§µ‡§æ ‡§∏‡•ç‡§ü‡•â‡§ï",
    phcSubtitle: "‡§∏‡§∞‡§ï‡§æ‡§∞‡•Ä ‡§´‡§æ‡§∞‡•ç‡§Æ‡•á‡§∏‡•Ä ‡§Æ‡•á‡§Ç ‡§¶‡§µ‡§æ ‡§ï‡•Ä ‡§â‡§™‡§≤‡§¨‡•ç‡§ß‡§§‡§æ ‡§ú‡§æ‡§Ç‡§ö‡•á‡§Ç",
    searchMedicines: "‡§¶‡§µ‡§æ‡§ì‡§Ç ‡§ï‡•Ä ‡§ñ‡•ã‡§ú...",
    filterAll: "‡§∏‡§≠‡•Ä",
    filterLow: "‡§ï‡§Æ ‡§∏‡•ç‡§ü‡•â‡§ï",
    filterAdequate: "‡§™‡§∞‡•ç‡§Ø‡§æ‡§™‡•ç‡§§",
    statusGood: "‡§™‡§∞‡•ç‡§Ø‡§æ‡§™‡•ç‡§§",
    statusMedium: "‡§Æ‡§ß‡•ç‡§Ø‡§Æ",
    statusLow: "‡§ï‡§Æ ‡§∏‡•ç‡§ü‡•â‡§ï",
    requestMore: "‡§î‡§∞ ‡§Æ‡§æ‡§Ç‡§ó‡•á‡§Ç",
    reportIssue: "‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§∞‡§ø‡§™‡•ã‡§∞‡•ç‡§ü ‡§ï‡§∞‡•á‡§Ç",
    // Health Library
    libraryTitle: "‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§∂‡§ø‡§ï‡•ç‡§∑‡§æ ‡§≤‡§æ‡§á‡§¨‡•ç‡§∞‡•á‡§∞‡•Ä",
    librarySubtitle: "‡§∞‡•ã‡§ó‡•Ä ‡§¶‡•á‡§ñ‡§≠‡§æ‡§≤ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§∂‡•à‡§ï‡•ç‡§∑‡§ø‡§ï ‡§∏‡§Ç‡§∏‡§æ‡§ß‡§®‡•ã‡§Ç ‡§§‡§ï ‡§™‡§π‡•Å‡§Ç‡§ö‡•á‡§Ç",
    filterAllTopics: "‡§∏‡§≠‡•Ä ‡§µ‡§ø‡§∑‡§Ø",
    filterMaternal: "‡§Æ‡§æ‡§§‡•É ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø",
    filterChild: "‡§¨‡§æ‡§≤ ‡§¶‡•á‡§ñ‡§≠‡§æ‡§≤",
    filterChronic: "‡§¶‡•Ä‡§∞‡•ç‡§ò‡§ï‡§æ‡§≤‡§ø‡§ï ‡§∞‡•ã‡§ó",
    readMore: "‡§î‡§∞ ‡§™‡§¢‡§º‡•á‡§Ç",
    // Schedule
    scheduleTitle: "‡§Ü‡§∂‡§æ ‡§ï‡§æ‡§∞‡•ç‡§Ø ‡§Ö‡§®‡•Å‡§∏‡•Ç‡§ö‡•Ä",
    filterToday: "‡§Ü‡§ú ‡§ï‡•á ‡§ï‡§æ‡§∞‡•ç‡§Ø",
    filterUpcoming: "‡§Ü‡§ó‡§æ‡§Æ‡•Ä",
    homeVisit: "‡§ò‡§∞‡•á‡§≤‡•Ç ‡§Ø‡§æ‡§§‡•ç‡§∞‡§æ",
    vaccinationDrive: "‡§ü‡•Ä‡§ï‡§æ‡§ï‡§∞‡§£ ‡§Ö‡§≠‡§ø‡§Ø‡§æ‡§®",
    healthCamp: "‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§∂‡§ø‡§µ‡§ø‡§∞",
    followUp: "‡§´‡•â‡§≤‡•ã-‡§Ö‡§™ ‡§Ø‡§æ‡§§‡•ç‡§∞‡§æ",
    completed: "‡§™‡•Ç‡§∞‡•ç‡§£",
    pending: "‡§≤‡§Ç‡§¨‡§ø‡§§",
    tasksPerformed: "‡§®‡§ø‡§∑‡•ç‡§™‡§æ‡§¶‡§ø‡§§ ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ï‡§æ‡§∞‡•ç‡§Ø:",
    markComplete: "‡§™‡•Ç‡§∞‡•ç‡§£ ‡§ö‡§ø‡§π‡•ç‡§®‡§ø‡§§ ‡§ï‡§∞‡•á‡§Ç",
    reschedule: "‡§™‡•Å‡§®‡§∞‡•ç‡§®‡§ø‡§∞‡•ç‡§ß‡§æ‡§∞‡§ø‡§§ ‡§ï‡§∞‡•á‡§Ç",
    noTasksTitle: "‡§ï‡•ã‡§à ‡§ï‡§æ‡§∞‡•ç‡§Ø ‡§Ö‡§®‡•Å‡§∏‡•Ç‡§ö‡§ø‡§§ ‡§®‡§π‡•Ä‡§Ç",
    noTasksSubtitle: "‡§á‡§∏ ‡§Ö‡§µ‡§ß‡§ø ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ï‡•ã‡§à ‡§ï‡§æ‡§∞‡•ç‡§Ø ‡§Ö‡§®‡•Å‡§∏‡•Ç‡§ö‡§ø‡§§ ‡§®‡§π‡•Ä‡§Ç",
    todayTasks: "‡§Ü‡§ú ‡§ï‡•á ‡§ï‡§æ‡§∞‡•ç‡§Ø",
    highPriority: "‡§â‡§ö‡•ç‡§ö ‡§™‡•ç‡§∞‡§æ‡§•‡§Æ‡§ø‡§ï‡§§‡§æ",
    // Notifications
    notifTitle: "‡§∏‡•Ç‡§ö‡§®‡§æ‡§è‡§Ç",
    notifSubtitle: "‡§Ü‡§™‡§ï‡•Ä ‡§π‡§æ‡§≤ ‡§ï‡•Ä ‡§Ö‡§≤‡§∞‡•ç‡§ü ‡§î‡§∞ ‡§Ö‡§™‡§°‡•á‡§ü",
    // Bottom Nav
    home: "‡§π‡•ã‡§Æ",
    records: "‡§∞‡§ø‡§ï‡•â‡§∞‡•ç‡§°",
    familyIdNav: "‡§™‡§∞‡§ø‡§µ‡§æ‡§∞ ‡§Ü‡§à‡§°‡•Ä",
    scheduleNav: "‡§Ö‡§®‡•Å‡§∏‡•Ç‡§ö‡•Ä",
    // Quick Actions Subtitles
    registerPatientSub: "‡§Ö‡§™‡§®‡•Ä ‡§¶‡•á‡§ñ‡§≠‡§æ‡§≤ ‡§Æ‡•á‡§Ç ‡§®‡§Ø‡§æ ‡§Æ‡§∞‡•Ä‡§ú ‡§ú‡•ã‡§°‡§º‡•á‡§Ç",
    symptomCheckSub: "‡§è‡§Ü‡§à-‡§∏‡§Ç‡§ö‡§æ‡§≤‡§ø‡§§ ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§Æ‡•Ç‡§≤‡•ç‡§Ø‡§æ‡§Ç‡§ï‡§®",
    medicineStockSub: "‡§™‡•Ä‡§è‡§ö‡§∏‡•Ä ‡§¶‡§µ‡§æ ‡§â‡§™‡§≤‡§¨‡•ç‡§ß‡§§‡§æ ‡§ú‡§æ‡§Ç‡§ö‡•á‡§Ç",
    updateHealthRecordSub: "‡§Æ‡§∞‡•Ä‡§ú ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§Ö‡§™‡§°‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç",
    generateFamilyIdSub: "‡§∞‡§ø‡§ï‡•â‡§∞‡•ç‡§° ‡§ï‡•á ‡§≤‡§ø‡§è ‡§™‡§∞‡§ø‡§µ‡§æ‡§∞ ‡§∏‡§Æ‡•Ç‡§π ‡§¨‡§®‡§æ‡§è‡§Ç",
    healthLibrarySub: "‡§∂‡•à‡§ï‡•ç‡§∑‡§ø‡§ï ‡§∏‡§Ç‡§∏‡§æ‡§ß‡§®‡•ã‡§Ç ‡§î‡§∞ ‡§Ü‡§ß‡§ø‡§ï‡§æ‡§∞‡§ø‡§ï ‡§™‡•Ä‡§è‡§ö‡§∏‡•Ä ‡§µ‡•Ä‡§°‡§ø‡§Ø‡•ã ‡§§‡§ï ‡§™‡§π‡•Å‡§Ç‡§ö‡•á‡§Ç",
    // Welcome Actions
    registerNewPatient: "‡§®‡§Ø‡§æ ‡§Æ‡§∞‡•Ä‡§ú ‡§™‡§Ç‡§ú‡•Ä‡§ï‡•É‡§§ ‡§ï‡§∞‡•á‡§Ç",
    updateHealthRecords: "‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§∞‡§ø‡§ï‡•â‡§∞‡•ç‡§° ‡§Ö‡§™‡§°‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç"
  },
  pa: {
    // Existing
    dashboard: "‡®°‡©à‡®∏‡®º‡®¨‡©ã‡®∞‡®°",
    updateHealthRecord: "‡®∏‡®ø‡®π‡®§ ‡®∞‡®ø‡®ï‡®æ‡®∞‡®° ‡®Ö‡®™‡®°‡©á‡®ü ‡®ï‡®∞‡©ã",
    registerPatient: "‡®∞‡©ã‡®ó‡©Ä ‡®®‡®ø‡®∞‡®ß‡®æ‡®∞‡®£",
    generateFamilyId: "‡®™‡®∞‡®ø‡®µ‡®æ‡®∞ ID ‡®ú‡®®‡®∞‡©á‡®ü ‡®ï‡®∞‡©ã",
    updateFamilyRecords: "‡®™‡®∞‡®ø‡®µ‡®æ‡®∞ ‡®∞‡®ø‡®ï‡®æ‡®∞‡®° ‡®Ö‡®™‡®°‡©á‡®ü ‡®ï‡®∞‡©ã",
    symptomCheck: "‡®è‡®Ü‡®à ‡®ö‡©à‡®ü‡®¨‡®æ‡®ü",
    medicineStock: "‡®¶‡®µ‡®æ‡®à ‡®∏‡®ü‡®æ‡®ï",
    healthLibrary: "‡®∏‡®ø‡®π‡®§ ‡®≤‡®æ‡®á‡®¨‡©ç‡®∞‡©á‡®∞‡©Ä",
    visitSchedule: "‡®µ‡®ø‡®ú‡®º‡®ø‡®ü ‡®∏‡®º‡©à‡®°‡®ø‡®ä‡®≤",
    settings: "‡®∏‡©à‡®ü‡®ø‡©∞‡®ó‡®ú‡®º",
    logout: "‡®≤‡©å‡®ó‡®Ü‡®ä‡®ü",
    welcome: "‡®∏‡®§ ‡®∏‡©ç‡®∞‡©Ä ‡®Ö‡®ï‡®æ‡®≤, {name}! üëã",
    dedication: "‡®ï‡®Æ‡®ø‡®ä‡®®‡®ø‡®ü‡©Ä ‡®∏‡®ø‡®π‡®§ ‡®≤‡®à ‡®§‡©Å‡®π‡®æ‡®°‡©Ä ‡®≠‡®ó‡®§‡©Ä ‡®π‡®∞ ‡®¶‡®ø‡®® ‡®´‡®º‡®∞‡®ï ‡®™‡©à‡®¶‡®æ ‡®ï‡®∞ ‡®∞‡®π‡©Ä ‡®π‡©à‡•§",
    totalPatients: "‡®ï‡©Å‡©±‡®≤ ‡®∞‡©ã‡®ó‡©Ä",
    activeCases: "‡®∏‡®ï‡®∞‡©Ä‡®Ö ‡®ï‡©á‡®∏",
    completedVisits: "‡®™‡©Ç‡®∞‡©Ä ‡®µ‡®ø‡®ú‡®º‡®ø‡®ü‡®æ‡®Ç",
    pendingTasks: "‡®≤‡©∞‡®¨‡©á ‡®ï‡©∞‡®Æ",
    quickActions: "‡®§‡©á‡®ú‡®º ‡®ï‡®æ‡®∞‡®µ‡®æ‡®à‡®Ü‡®Ç",
    searchPlaceholder: "‡®∞‡©ã‡®ó‡©Ä‡®Ü‡®Ç, ‡®∞‡®ø‡®ï‡®æ‡®∞‡®° ‡®ñ‡©ã‡®ú‡©ã...",
    // Login
    appTitle: "‡®ö‡®ø‡®ï‡®ø‡®§‡®∏‡®æ365",
    loginTitle: "‡®Ü‡®∏‡®º‡®æ ‡®µ‡®∞‡®ï‡®∞ ‡®≤‡©å‡®ó‡®á‡®®",
    loginSubtitle: "‡®™‡©ã‡®∞‡®ü‡®≤ ‡®§‡©±‡®ï ‡®™‡®π‡©Å‡©∞‡®ö‡®£ ‡®≤‡®à ‡®Ü‡®™‡®£‡©Ä‡®Ü‡®Ç ‡®ó‡®ø‡®£‡®§‡©Ä‡®Ü‡®Ç ‡®¶‡®∞‡®ú ‡®ï‡®∞‡©ã",
    errorBoth: "‡®ï‡®ø‡®∞‡®™‡®æ ‡®ï‡®∞‡®ï‡©á ‡®Ü‡®∏‡®º‡®æ ID ‡®Ö‡®§‡©á ‡®ú‡®®‡®Æ ‡®Æ‡®ø‡®§‡©Ä ‡®¶‡©ã‡®µ‡©á‡®Ç ‡®¶‡®∞‡®ú ‡®ï‡®∞‡©ã",
    errorId: "‡®ï‡®ø‡®∞‡®™‡®æ ‡®ï‡®∞‡®ï‡©á ‡®µ‡©à‡®ß ‡®Ü‡®∏‡®º‡®æ ID ‡®¶‡®∞‡®ú ‡®ï‡®∞‡©ã",
    labelAshaId: "‡®Ü‡®∏‡®º‡®æ ‡®µ‡®∞‡®ï‡®∞ ID",
    placeholderAshaId: "‡®Ü‡®™‡®£‡©Ä ‡®Ü‡®∏‡®º‡®æ ID ‡®¶‡®∞‡®ú ‡®ï‡®∞‡©ã",
    labelDob: "‡®ú‡®®‡®Æ ‡®Æ‡®ø‡®§‡©Ä",
    loginButton: "‡®™‡©ã‡®∞‡®ü‡®≤ ‡®µ‡®ø‡©±‡®ö ‡®≤‡©å‡®ó‡®á‡®® ‡®ï‡®∞‡©ã",
    helpText: "‡®Æ‡®¶‡®¶ ‡®ö‡®æ‡®π‡©Ä‡®¶‡©Ä ‡®π‡©à? ‡®Ü‡®™‡®£‡©á ‡®∏‡©Å‡®™‡®∞‡®µ‡®æ‡®à‡®ú‡®º‡®∞ ‡®®‡®æ‡®≤ ‡®∏‡©∞‡®™‡®∞‡®ï ‡®ï‡®∞‡©ã",
    // Family ID Generator
    familyTitle: "‡®™‡®∞‡®ø‡®µ‡®æ‡®∞ ID ‡®ú‡®®‡®∞‡©á‡®ü ‡®ï‡®∞‡©ã",
    familySubtitle: "‡®™‡®∞‡®ø‡®µ‡®æ‡®∞ ‡®®‡©Ç‡©∞ ‡®ú‡©ã‡©ú‡®® ‡®≤‡®à ‡®µ‡®ø‡®≤‡©±‡®ñ‡®£ ‡®™‡®∞‡®ø‡®µ‡®æ‡®∞ ID ‡®¨‡®£‡®æ‡®ì",
    headLabel: "‡®™‡®∞‡®ø‡®µ‡®æ‡®∞ ‡®¶‡©á ‡®∏‡®∞‡®¨‡®ß‡®æ‡®∞‡©Ä ‡®¶‡®æ ‡®∞‡©ã‡®ó‡©Ä ID *",
    headPlaceholder: "‡®™‡®∞‡®ø‡®µ‡®æ‡®∞ ‡®¶‡©á ‡®∏‡®∞‡®¨‡®ß‡®æ‡®∞‡©Ä ‡®¶‡®æ ‡®∞‡©ã‡®ó‡©Ä ID ‡®¶‡®∞‡®ú ‡®ï‡®∞‡©ã",
    membersTitle: "‡®™‡®∞‡®ø‡®µ‡®æ‡®∞ ‡®®‡©Ç‡©∞",
    addMember: "‡®∏‡®¶‡®∏‡®º‡©Ä ‡®ú‡©ã‡©ú‡©ã",
    patientIdLabel: "‡®∞‡©ã‡®ó‡©Ä ID",
    patientIdPlaceholder: "‡®∞‡©ã‡®ó‡©Ä ID ‡®¶‡®∞‡®ú ‡®ï‡®∞‡©ã",
    relationLabel: "‡®∏‡®∞‡®¨‡®ß‡®æ‡®∞‡©Ä ‡®®‡®æ‡®≤ ‡®∏‡®¨‡©∞‡®ß",
    relationPlaceholder: "‡®∏‡®¨‡©∞‡®ß ‡®ö‡©Å‡®£‡©ã",
    relationSpouse: "‡®≠‡®æ‡®¨‡©Ä/‡®≠‡®∞‡®æ",
    relationChild: "‡®¨‡©±‡®ö‡®æ",
    relationParent: "‡®Æ‡®æ‡®™‡©á",
    relationSibling: "‡®≠‡®∞‡®æ/‡®≠‡©à‡®£",
    relationGrandchild: "‡®™‡©ã‡®§‡®æ/‡®™‡©ã‡®§‡©Ä",
    relationOther: "‡®π‡©ã‡®∞",
    generateButton: "‡®™‡®∞‡®ø‡®µ‡®æ‡®∞ ID ‡®ú‡®®‡®∞‡©á‡®ü ‡®ï‡®∞‡©ã",
    generatedTitle: "‡®ú‡®®‡®∞‡©á‡®ü ‡®ï‡©Ä‡®§‡©Ä ‡®™‡®∞‡®ø‡®µ‡®æ‡®∞ ID",
    copyButton: "ID ‡®ï‡®æ‡®™‡©Ä ‡®ï‡®∞‡©ã",
    noteText: "‡®®‡©ã‡®ü: ‡®∞‡®ø‡®ï‡®æ‡®∞‡®° ‡®ú‡©ã‡©ú‡®® ‡®≤‡®à ‡®á‡®∏ ‡®™‡®∞‡®ø‡®µ‡®æ‡®∞ ID ‡®®‡©Ç‡©∞ ‡®∏‡®æ‡®∞‡©á ‡®™‡®∞‡®ø‡®µ‡®æ‡®∞ ‡®®‡©Ç‡©∞ ‡®®‡®æ‡®≤ ‡®∏‡®æ‡®Ç‡®ù‡®æ ‡®ï‡®∞‡©ã‡•§",
    alertHeadId: "‡®ï‡®ø‡®∞‡®™‡®æ ‡®ï‡®∞‡®ï‡©á ‡®™‡®∞‡®ø‡®µ‡®æ‡®∞ ‡®¶‡©á ‡®∏‡®∞‡®¨‡®ß‡®æ‡®∞‡©Ä ‡®¶‡®æ ‡®∞‡©ã‡®ó‡©Ä ID ‡®¶‡®∞‡®ú ‡®ï‡®∞‡©ã",
    // Update Family Records
    updateFamilyTitle: "‡®™‡®∞‡®ø‡®µ‡®æ‡®∞ ‡®∞‡®ø‡®ï‡®æ‡®∞‡®° ‡®Ö‡®™‡®°‡©á‡®ü ‡®ï‡®∞‡©ã",
    updateFamilySubtitle: "‡®™‡©Ç‡®∞‡©á ‡®™‡®∞‡®ø‡®µ‡®æ‡®∞ ‡®¶‡©á ‡®∏‡®ø‡®π‡®§ ‡®∞‡®ø‡®ï‡®æ‡®∞‡®° ‡®®‡©Ç‡©∞ ‡®™‡®∞‡®ø‡®µ‡®æ‡®∞ ID ‡®®‡®æ‡®≤ ‡®Ö‡®™‡®°‡©á‡®ü ‡®ï‡®∞‡©ã",
    familyIdPlaceholder: "‡®™‡®∞‡®ø‡®µ‡®æ‡®∞ ID ‡®¶‡®∞‡®ú ‡®ï‡®∞‡©ã",
    searchFamily: "‡®™‡®∞‡®ø‡®µ‡®æ‡®∞ ‡®ñ‡©ã‡®ú‡©ã",
    familyHeader: "‡®™‡®∞‡®ø‡®µ‡®æ‡®∞: ",
    membersCount: " ‡®®‡©Ç‡©∞",
    headRole: "(‡®∏‡®∞‡®¨‡®ß‡®æ‡®∞‡©Ä)",
    patientInfo: "‡®∞‡©ã‡®ó‡©Ä ID: {id} ‚Ä¢ {age} ‡®∏‡®æ‡®≤ ‚Ä¢ {gender}",
    bpLabel: "‡®∞‡®ï‡®§ ‡®™‡©ç‡®∞‡©à‡®∏‡®º‡®∞",
    bpPlaceholder: "‡®â‡®¶‡®æ‡®π‡®∞‡®®, 120/80",
    sugarLabel: "‡®∞‡®ï‡®§ ‡®∏‡®º‡©Ç‡®ó‡®∞",
    sugarPlaceholder: "‡®â‡®¶‡®æ‡®π‡®∞‡®®, 120 mg/dL",
    weightLabel: "‡®≠‡®æ‡®∞",
    weightPlaceholder: "‡®â‡®¶‡®æ‡®π‡®∞‡®®, 65 kg",
    updateAll: "‡®∏‡®æ‡®∞‡©á ‡®∞‡®ø‡®ï‡®æ‡®∞‡®° ‡®Ö‡®™‡®°‡©á‡®ü ‡®ï‡®∞‡©ã",
    alertFamilyId: "‡®ï‡®ø‡®∞‡®™‡®æ ‡®ï‡®∞‡®ï‡©á ‡®™‡®∞‡®ø‡®µ‡®æ‡®∞ ID ‡®¶‡®∞‡®ú ‡®ï‡®∞‡©ã",
    successUpdate: "‡®™‡®∞‡®ø‡®µ‡®æ‡®∞ ‡®∞‡®ø‡®ï‡®æ‡®∞‡®° ‡®∏‡®´‡®≤‡®§‡®æ‡®™‡©Ç‡®∞‡®µ‡®ï ‡®Ö‡®™‡®°‡©á‡®ü ‡®π‡©ã ‡®ó‡®è!",
    // Chatbot
    chatHeader: "‡®è‡®Ü‡®à ‡®ö‡©à‡®ü‡®¨‡®æ‡®ü",
    statusOnline: "‡®Ü‡®®‡®≤‡®æ‡®à‡®®",
    statusOffline: "‡®Ü‡®´‡®≤‡®æ‡®à‡®®",
    chatPlaceholder: "‡®Ü‡®™‡®£‡©á ‡®≤‡©±‡®õ‡®£‡®æ‡®Ç ‡®¶‡®æ ‡®µ‡®∞‡®£‡®® ‡®Ö‡©∞‡®ó‡®∞‡©á‡®ú‡®º‡©Ä ‡®ú‡®æ‡®Ç ‡®π‡®ø‡©∞‡®¶‡©Ä ‡®µ‡®ø‡©±‡®ö ‡®ï‡®∞‡©ã...",
    disclaimer: "‚ö†Ô∏è ‡®á‡®π ‡®ö‡®ø‡®ï‡®ø‡®§‡®∏‡®æ ‡®∏‡®≤‡®æ‡®π ‡®®‡®π‡©Ä‡®Ç ‡®π‡©à‡•§ ‡®∏‡®ø‡®π‡®§ ‡®™‡©á‡®∏‡®º‡©á‡®µ‡®∞ ‡®®‡®æ‡®≤ ‡®∏‡©∞‡®™‡®∞‡®ï ‡®ï‡®∞‡©ã‡•§",
    speakerPlay: "‡®á‡®∏ ‡®∏‡©Å‡®®‡©á‡®π‡©á ‡®®‡©Ç‡©∞ ‡®∏‡©Å‡®£‡©ã",
    speakerStop: "‡®™‡®≤‡©á‡®¨‡©à‡®ï ‡®∞‡©ã‡®ï‡©ã",
    micTitle: "‡®π‡®ø‡©∞‡®¶‡©Ä ‡®µ‡®ø‡©±‡®ö ‡®¨‡©ã‡®≤‡©ã",
    sendIcon: "‚û§",
    speechNotSupported: "‡®§‡©Å‡®π‡®æ‡®°‡©á ‡®¨‡©ç‡®∞‡®æ‡®ä‡®ú‡®º‡®∞ ‡®µ‡®ø‡©±‡®ö ‡®∏‡®™‡©Ä‡®ö ‡®∞‡®ø‡®ï‡®ó‡®®‡©Ä‡®∏‡®º‡®® ‡®∏‡®Æ‡®∞‡®•‡®ø‡®§ ‡®®‡®π‡©Ä‡®Ç ‡®π‡©à‡•§ ‡®ï‡®ø‡®∞‡®™‡®æ ‡®ï‡®∞‡®ï‡©á ‡®ï‡©ç‡®∞‡©ã‡®Æ ‡®ú‡®æ‡®Ç ‡®ê‡®ú‡®º ‡®¶‡®æ ‡®â‡®™‡®Ø‡©ã‡®ó ‡®ï‡®∞‡©ã‡•§",
    ttsNotSupported: "‡®§‡©Å‡®π‡®æ‡®°‡©á ‡®¨‡©ç‡®∞‡®æ‡®ä‡®ú‡®º‡®∞ ‡®µ‡®ø‡©±‡®ö ‡®ü‡©à‡®ï‡®∏‡®ü-‡®ü‡©Ç-‡®∏‡®™‡©Ä‡®ö ‡®∏‡®Æ‡®∞‡®•‡®ø‡®§ ‡®®‡®π‡©Ä‡®Ç ‡®π‡©à‡•§",
    audioError: "‡®Ü‡®°‡©Ä‡®ì ‡®µ‡®æ‡®ú‡®£ ‡®µ‡®ø‡©±‡®ö ‡®ó‡®≤‡®§‡©Ä‡•§ ‡®ï‡®ø‡®∞‡®™‡®æ ‡®ï‡®∞‡®ï‡©á ‡®´‡®ø‡®∞ ‡®ï‡©ã‡®∏‡®º‡®ø‡®∏‡®º ‡®ï‡®∞‡©ã‡•§",
    // Medicine Tracker
    phcTitle: "‡®™‡©Ä‡®ê‡®ö‡®∏‡©Ä ‡®¶‡®µ‡®æ‡®à ‡®∏‡®ü‡®æ‡®ï",
    phcSubtitle: "‡®∏‡®∞‡®ï‡®æ‡®∞‡©Ä ‡®´‡®æ‡®∞‡®Æ‡©á‡®∏‡©Ä ‡®µ‡®ø‡©±‡®ö ‡®¶‡®µ‡®æ‡®à ‡®¶‡©Ä ‡®â‡®™‡®≤‡®¨‡®ß‡®§‡®æ ‡®ú‡®æ‡®Ç‡®ö‡©ã",
    searchMedicines: "‡®¶‡®µ‡®æ‡®à‡®Ü‡®Ç ‡®ñ‡©ã‡®ú‡©ã...",
    filterAll: "‡®∏‡®≠",
    filterLow: "‡®ò‡©±‡®ü ‡®∏‡®ü‡®æ‡®ï",
    filterAdequate: "‡®™‡©Ç‡®∞‡©Ä ‡®§‡®∞‡©ç‡®π‡®æ‡®Ç",
    statusGood: "‡®™‡©Ç‡®∞‡©Ä ‡®§‡®∞‡©ç‡®π‡®æ‡®Ç",
    statusMedium: "‡®Æ‡©±‡®ß‡®Æ",
    statusLow: "‡®ò‡©±‡®ü ‡®∏‡®ü‡®æ‡®ï",
    requestMore: "‡®π‡©ã‡®∞ ‡®Æ‡©∞‡®ó‡©ã",
    reportIssue: "‡®∏‡®Æ‡©±‡®∏‡®ø‡®Ü ‡®¶‡©±‡®∏‡©ã",
    // Health Library
    libraryTitle: "‡®∏‡®ø‡®π‡®§ ‡®∏‡®ø‡©±‡®ñ‡®ø‡®Ü ‡®≤‡®æ‡®á‡®¨‡©ç‡®∞‡©á‡®∞‡©Ä",
    librarySubtitle: "‡®∞‡©ã‡®ó‡©Ä ‡®¶‡©á‡®ñ‡®≠‡®æ‡®≤ ‡®≤‡®à ‡®∏‡®ø‡©±‡®ñ‡®ø‡®Ü‡®§‡®Æ‡®ï ‡®∏‡®∞‡©ã‡®§‡®æ‡®Ç ‡®§‡©±‡®ï ‡®™‡®π‡©Å‡©∞‡®ö‡©ã",
    filterAllTopics: "‡®∏‡®æ‡®∞‡©á ‡®µ‡®ø‡®∏‡®º‡©á",
    filterMaternal: "‡®Æ‡®æ‡®§‡®æ ‡®∏‡®ø‡®π‡®§",
    filterChild: "‡®¨‡®æ‡®≤ ‡®¶‡©á‡®ñ‡®≠‡®æ‡®≤",
    filterChronic: "‡®≤‡©∞‡®¨‡©á ‡®∏‡®Æ‡©á‡®Ç ‡®¶‡©á ‡®¨‡®ø‡®Æ‡®æ‡®∞‡©Ä‡®Ü‡®Ç",
    readMore: "‡®π‡©ã‡®∞ ‡®™‡©ú‡©ç‡®π‡©ã",
    // Schedule
    scheduleTitle: "‡®Ü‡®∏‡®º‡®æ ‡®ï‡©∞‡®Æ ‡®∏‡®º‡©à‡®°‡®ø‡®ä‡®≤",
    filterToday: "‡®Ö‡©±‡®ú ‡®¶‡©á ‡®ï‡©∞‡®Æ",
    filterUpcoming: "‡®Ü‡®â‡®£ ‡®µ‡®æ‡®≤‡©á",
    homeVisit: "‡®ò‡®∞‡©á‡®≤‡©Ç ‡®µ‡®ø‡®ú‡®º‡®ø‡®ü",
    vaccinationDrive: "‡®µ‡©à‡®ï‡®∏‡©Ä‡®®‡©á‡®∏‡®º‡®® ‡®°‡®∞‡®æ‡®à‡®µ",
    healthCamp: "‡®∏‡®ø‡®π‡®§ ‡®ï‡©à‡®Ç‡®™",
    followUp: "‡®´‡®æ‡®≤‡©ã-‡®Ö‡®™ ‡®µ‡®ø‡®ú‡®º‡®ø‡®ü",
    completed: "‡®™‡©Ç‡®∞‡®æ",
    pending: "‡®≤‡©∞‡®¨‡®æ",
    tasksPerformed: "‡®ï‡®∞‡®® ‡®≤‡®à ‡®ï‡©∞‡®Æ:",
    markComplete: "‡®™‡©Ç‡®∞‡®æ ‡®ö‡®ø‡©∞‡®®‡©ç‡®π‡®ø‡®§ ‡®ï‡®∞‡©ã",
    reschedule: "‡®´‡®ø‡®∞ ‡®®‡®ø‡®∞‡®ß‡®æ‡®∞‡®ø‡®§ ‡®ï‡®∞‡©ã",
    noTasksTitle: "‡®ï‡©ã‡®à ‡®ï‡©∞‡®Æ ‡®®‡®ø‡®∞‡®ß‡®æ‡®∞‡®ø‡®§ ‡®®‡®π‡©Ä‡®Ç",
    noTasksSubtitle: "‡®á‡®∏ ‡®Ö‡®µ‡®ß‡©Ä ‡®≤‡®à ‡®ï‡©ã‡®à ‡®ï‡©∞‡®Æ ‡®®‡®ø‡®∞‡®ß‡®æ‡®∞‡®ø‡®§ ‡®®‡®π‡©Ä‡®Ç",
    todayTasks: "‡®Ö‡©±‡®ú ‡®¶‡©á ‡®ï‡©∞‡®Æ",
    highPriority: "‡®â‡©±‡®ö ‡®™‡©ç‡®∞‡®æ‡®•‡®Æ‡®ø‡®ï‡®§‡®æ",
    // Notifications
    notifTitle: "‡®®‡©ã‡®ü‡©Ä‡®´‡®ø‡®ï‡©á‡®∏‡®º‡®®‡®æ‡®Ç",
    notifSubtitle: "‡®§‡©Å‡®π‡®æ‡®°‡©Ä‡®Ü‡®Ç ‡®π‡®æ‡®≤‡©Ä‡®Ü ‡®Ö‡®≤‡®∞‡®ü ‡®Ö‡®§‡©á ‡®Ö‡®™‡®°‡©á‡®ü",
    // Bottom Nav
    home: "‡®ò‡®∞",
    records: "‡®∞‡®ø‡®ï‡®æ‡®∞‡®°",
    familyIdNav: "‡®™‡®∞‡®ø‡®µ‡®æ‡®∞ ID",
    scheduleNav: "‡®∏‡®º‡©à‡®°‡®ø‡®ä‡®≤",
    // Quick Actions Subtitles
    registerPatientSub: "‡®Ü‡®™‡®£‡©Ä ‡®¶‡©á‡®ñ‡®≠‡®æ‡®≤ ‡®µ‡®ø‡©±‡®ö ‡®®‡®µ‡®æ‡®Ç ‡®∞‡©ã‡®ó‡©Ä ‡®ú‡©ã‡©ú‡©ã",
    symptomCheckSub: "‡®è‡®Ü‡®à-‡®∏‡©∞‡®ö‡®æ‡®≤‡®ø‡®§ ‡®∏‡®ø‡®π‡®§ ‡®Æ‡©Å‡®≤‡®æ‡®Ç‡®ï‡®£",
    medicineStockSub: "‡®™‡©Ä‡®ê‡®ö‡®∏‡©Ä ‡®¶‡®µ‡®æ‡®à ‡®â‡®™‡®≤‡®¨‡®ß‡®§‡®æ ‡®ú‡®æ‡®Ç‡®ö‡©ã",
    updateHealthRecordSub: "‡®∞‡©ã‡®ó‡©Ä ‡®∏‡®ø‡®π‡®§ ‡®ú‡®æ‡®£‡®ï‡®æ‡®∞‡©Ä ‡®Ö‡®™‡®°‡©á‡®ü ‡®ï‡®∞‡©ã",
    generateFamilyIdSub: "‡®∞‡®ø‡®ï‡®æ‡®∞‡®° ‡®≤‡®à ‡®™‡®∞‡®ø‡®µ‡®æ‡®∞ ‡®ó‡®∞‡©Å‡©±‡®™ ‡®¨‡®£‡®æ‡®ì",
    healthLibrarySub: "‡®∏‡®ø‡©±‡®ñ‡®ø‡®Ü‡®§‡®Æ‡®ï ‡®∏‡®∞‡©ã‡®§‡®æ‡®Ç ‡®Ö‡®§‡©á ‡®Ö‡®ß‡®ø‡®ï‡®æ‡®∞‡®ï ‡®™‡©Ä‡®ê‡®ö‡®∏‡©Ä ‡®µ‡©Ä‡®°‡©Ä‡®ì‡®Ü‡®Ç ‡®§‡©±‡®ï ‡®™‡®π‡©Å‡©∞‡®ö‡©ã",
    // Welcome Actions
    registerNewPatient: "‡®®‡®µ‡®æ‡®Ç ‡®∞‡©ã‡®ó‡©Ä ‡®®‡®ø‡®∞‡®ß‡®æ‡®∞‡®ø‡®§ ‡®ï‡®∞‡©ã",
    updateHealthRecords: "‡®∏‡®ø‡®π‡®§ ‡®∞‡®ø‡®ï‡®æ‡®∞‡®° ‡®Ö‡®™‡®°‡©á‡®ü ‡®ï‡®∞‡©ã"
  },
  te: {
    // Existing
    dashboard: "‡∞°‡∞æ‡∞∑‡±ç‚Äå‡∞¨‡±ã‡∞∞‡±ç‡∞°‡±ç",
    updateHealthRecord: "‡∞Ü‡∞∞‡±ã‡∞ó‡±ç‡∞Ø ‡∞∞‡∞ø‡∞ï‡∞æ‡∞∞‡±ç‡∞°‡±ç ‡∞Ö‡∞™‡±ç‚Äå‡∞°‡±á‡∞ü‡±ç ‡∞ö‡±á‡∞Ø‡∞Ç‡∞°‡∞ø",
    registerPatient: "‡∞∞‡±ã‡∞ó‡∞ø ‡∞∞‡∞ø‡∞ú‡∞ø‡∞∏‡±ç‡∞ü‡∞∞‡±ç",
    generateFamilyId: "‡∞ï‡±Å‡∞ü‡±Å‡∞Ç‡∞¨ ID ‡∞ú‡∞®‡∞∞‡±á‡∞ü‡±ç ‡∞ö‡±á‡∞Ø‡∞Ç‡∞°‡∞ø",
    updateFamilyRecords: "‡∞ï‡±Å‡∞ü‡±Å‡∞Ç‡∞¨ ‡∞∞‡∞ø‡∞ï‡∞æ‡∞∞‡±ç‡∞°‡±ç ‡∞Ö‡∞™‡±ç‚Äå‡∞°‡±á‡∞ü‡±ç ‡∞ö‡±á‡∞Ø‡∞Ç‡∞°‡∞ø",
    symptomCheck: "AI ‡∞ö‡∞æ‡∞ü‡±ç‚Äå‡∞¨‡∞æ‡∞ü‡±ç",
    medicineStock: "‡∞Æ‡∞Ç‡∞¶‡±Å‡∞≤ ‡∞∏‡±ç‡∞ü‡∞æ‡∞ï‡±ç",
    healthLibrary: "‡∞Ü‡∞∞‡±ã‡∞ó‡±ç‡∞Ø ‡∞≤‡±à‡∞¨‡±ç‡∞∞‡∞∞‡±Ä",
    visitSchedule: "‡∞∏‡∞Ç‡∞¶‡∞∞‡±ç‡∞∂‡∞® ‡∞§‡∞æ‡∞∞‡∞§‡∞Æ‡±ç‡∞Ø‡∞Ç",
    settings: "‡∞∏‡±Ü‡∞ü‡±ç‡∞ü‡∞ø‡∞Ç‡∞ó‡±ç‡∞∏‡±ç",
    logout: "‡∞≤‡∞æ‡∞ó‡±ç‡∞Ö‡∞µ‡±Å‡∞ü‡±ç",
    welcome: "‡∞®‡∞Æ‡∞∏‡±ç‡∞ï‡∞æ‡∞∞‡∞Ç, {name}! üëã",
    dedication: "‡∞∏‡∞Æ‡∞æ‡∞ú ‡∞Ü‡∞∞‡±ã‡∞ó‡±ç‡∞Ø‡∞æ‡∞®‡∞ø‡∞ï‡∞ø ‡∞Æ‡±Ä ‡∞Ö‡∞Ç‡∞ï‡∞ø‡∞§‡∞≠‡∞æ‡∞µ‡∞Ç ‡∞™‡±ç‡∞∞‡∞§‡∞ø ‡∞∞‡±ã‡∞ú‡±Å ‡∞Æ‡∞æ‡∞∞‡±ç‡∞™‡±Å ‡∞§‡±Ä‡∞∏‡±Å‡∞ï‡±Å‡∞∞‡±Å‡∞ö‡±Å‡∞Ç‡∞¶‡∞ø.",
    totalPatients: "‡∞Æ‡±ä‡∞§‡±ç‡∞§‡∞Ç ‡∞∞‡±ã‡∞ó‡±Å‡∞≤‡±Å",
    activeCases: "‡∞∏‡∞ï‡±ç‡∞∞‡∞ø‡∞Ø ‡∞ï‡±á‡∞∏‡±Å‡∞≤‡±Å",
    completedVisits: "‡∞™‡±Ç‡∞∞‡±ç‡∞§‡∞ø ‡∞∏‡∞Ç‡∞¶‡∞∞‡±ç‡∞∂‡∞®‡∞≤‡±Å",
    pendingTasks: "‡∞™‡±Ü‡∞Ç‡∞°‡∞ø‡∞Ç‡∞ó‡±ç ‡∞ü‡∞æ‡∞∏‡±ç‡∞ï‡±ç‚Äå‡∞≤‡±Å",
    quickActions: "‡∞§‡±ç‡∞µ‡∞∞‡∞ø‡∞§ ‡∞ö‡∞∞‡±ç‡∞Ø‡∞≤‡±Å",
    searchPlaceholder: "‡∞∞‡±ã‡∞ó‡±Å‡∞≤‡±Å, ‡∞∞‡∞ø‡∞ï‡∞æ‡∞∞‡±ç‡∞°‡±Å‡∞≤‡±Å ‡∞∂‡±ã‡∞ß‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø...",
    // Login
    appTitle: "‡∞ö‡∞ø‡∞ï‡∞ø‡∞§‡±ç‡∞∏365",
    loginTitle: "‡∞Ü‡∞∂‡∞æ ‡∞µ‡∞∞‡±ç‡∞ï‡∞∞‡±ç ‡∞≤‡∞æ‡∞ó‡∞ø‡∞®‡±ç",
    loginSubtitle: "‡∞™‡±ã‡∞∞‡±ç‡∞ü‡∞≤‡±ç‚Äå‡∞ï‡±Å ‡∞™‡±ç‡∞∞‡∞µ‡±á‡∞∂‡∞ø‡∞Ç‡∞ö‡∞°‡∞æ‡∞®‡∞ø‡∞ï‡∞ø ‡∞Æ‡±Ä ‡∞ó‡±Å‡∞∞‡±ç‡∞§‡∞ø‡∞Ç‡∞™‡±Å ‡∞µ‡∞ø‡∞µ‡∞∞‡∞æ‡∞≤‡∞®‡±Å ‡∞®‡∞Æ‡±ã‡∞¶‡±Å ‡∞ö‡±á‡∞Ø‡∞Ç‡∞°‡∞ø",
    errorBoth: "‡∞Ü‡∞∂‡∞æ ID ‡∞Æ‡∞∞‡∞ø‡∞Ø‡±Å ‡∞™‡±Å‡∞ü‡±ç‡∞ü‡∞ø‡∞® ‡∞§‡±á‡∞¶‡±Ä ‡∞∞‡±Ü‡∞Ç‡∞°‡∞ø‡∞Ç‡∞ü‡∞ø‡∞®‡±Ä ‡∞®‡∞Æ‡±ã‡∞¶‡±Å ‡∞ö‡±á‡∞Ø‡∞Ç‡∞°‡∞ø",
    errorId: "‡∞µ‡∞æ‡∞≤‡∞ø‡∞°‡±ç ‡∞Ü‡∞∂‡∞æ ID ‡∞®‡∞Æ‡±ã‡∞¶‡±Å ‡∞ö‡±á‡∞Ø‡∞Ç‡∞°‡∞ø",
    labelAshaId: "‡∞Ü‡∞∂‡∞æ ‡∞µ‡∞∞‡±ç‡∞ï‡∞∞‡±ç ID",
    placeholderAshaId: "‡∞Æ‡±Ä ‡∞Ü‡∞∂‡∞æ ID ‡∞®‡∞Æ‡±ã‡∞¶‡±Å ‡∞ö‡±á‡∞Ø‡∞Ç‡∞°‡∞ø",
    labelDob: "‡∞™‡±Å‡∞ü‡±ç‡∞ü‡∞ø‡∞® ‡∞§‡±á‡∞¶‡±Ä",
    loginButton: "‡∞™‡±ã‡∞∞‡±ç‡∞ü‡∞≤‡±ç‚Äå‡∞≤‡±ã ‡∞≤‡∞æ‡∞ó‡∞ø‡∞®‡±ç ‡∞ö‡±á‡∞Ø‡∞Ç‡∞°‡∞ø",
    helpText: "‡∞∏‡∞π‡∞æ‡∞Ø‡∞Ç ‡∞ï‡∞æ‡∞µ‡∞æ‡∞≤‡∞æ? ‡∞Æ‡±Ä ‡∞∏‡±Ç‡∞™‡∞∞‡±ç‚Äå‡∞µ‡±à‡∞ú‡∞∞‡±ç‚Äå‡∞®‡±Å ‡∞∏‡∞Ç‡∞™‡±ç‡∞∞‡∞¶‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø",
    // Family ID Generator
    familyTitle: "‡∞ï‡±Å‡∞ü‡±Å‡∞Ç‡∞¨ ID ‡∞ú‡∞®‡∞∞‡±á‡∞ü‡±ç ‡∞ö‡±á‡∞Ø‡∞Ç‡∞°‡∞ø",
    familySubtitle: "‡∞ï‡±Å‡∞ü‡±Å‡∞Ç‡∞¨ ‡∞∏‡∞≠‡±ç‡∞Ø‡±Å‡∞≤‡∞®‡±Å ‡∞≤‡∞ø‡∞Ç‡∞ï‡±ç ‡∞ö‡±á‡∞Ø‡∞°‡∞æ‡∞®‡∞ø‡∞ï‡∞ø ‡∞Ø‡±Ç‡∞®‡∞ø‡∞ï‡±ç ‡∞ï‡±Å‡∞ü‡±Å‡∞Ç‡∞¨ ID ‡∞∏‡±É‡∞∑‡±ç‡∞ü‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø",
    headLabel: "‡∞ï‡±Å‡∞ü‡±Å‡∞Ç‡∞¨ ‡∞™‡±ç‡∞∞‡∞ß‡∞æ‡∞®‡∞ø ‡∞∞‡±ã‡∞ó‡∞ø ID *",
    headPlaceholder: "‡∞ï‡±Å‡∞ü‡±Å‡∞Ç‡∞¨ ‡∞™‡±ç‡∞∞‡∞ß‡∞æ‡∞®‡∞ø ‡∞∞‡±ã‡∞ó‡∞ø ID ‡∞®‡∞Æ‡±ã‡∞¶‡±Å ‡∞ö‡±á‡∞Ø‡∞Ç‡∞°‡∞ø",
    membersTitle: "‡∞ï‡±Å‡∞ü‡±Å‡∞Ç‡∞¨ ‡∞∏‡∞≠‡±ç‡∞Ø‡±Å‡∞≤‡±Å",
    addMember: "‡∞∏‡∞≠‡±ç‡∞Ø‡±Å‡∞°‡∞ø‡∞®‡∞ø ‡∞ú‡±ã‡∞°‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø",
    patientIdLabel: "‡∞∞‡±ã‡∞ó‡∞ø ID",
    patientIdPlaceholder: "‡∞∞‡±ã‡∞ó‡∞ø ID ‡∞®‡∞Æ‡±ã‡∞¶‡±Å ‡∞ö‡±á‡∞Ø‡∞Ç‡∞°‡∞ø",
    relationLabel: "‡∞™‡±ç‡∞∞‡∞ß‡∞æ‡∞®‡∞ø‡∞ï‡∞ø ‡∞∏‡∞Ç‡∞¨‡∞Ç‡∞ß‡∞Ç",
    relationPlaceholder: "‡∞∏‡∞Ç‡∞¨‡∞Ç‡∞ß‡∞æ‡∞®‡±ç‡∞®‡∞ø ‡∞é‡∞Ç‡∞ö‡±Å‡∞ï‡±ã‡∞Ç‡∞°‡∞ø",
    relationSpouse: "‡∞≠‡∞∞‡±ç‡∞§/‡∞≠‡∞æ‡∞∞‡±ç‡∞Ø",
    relationChild: "‡∞¨‡∞ø‡∞°‡±ç‡∞°",
    relationParent: "‡∞§‡∞≤‡±ç‡∞≤‡∞ø‡∞¶‡∞Ç‡∞°‡±ç‡∞∞‡±Å‡∞≤‡±Å",
    relationSibling: "‡∞∏‡±ã‡∞¶‡∞∞‡±Å‡∞°‡±Å/‡∞∏‡±ã‡∞¶‡∞∞‡∞ø",
    relationGrandchild: "‡∞§‡±ç‡∞ï‡±ç‡∞ï‡±Å‡∞°‡±Å/‡∞§‡±ç‡∞ï‡±ç‡∞ï‡±Å‡∞∞‡∞æ‡∞≤‡±Å",
    relationOther: "‡∞á‡∞§‡∞∞",
    generateButton: "‡∞ï‡±Å‡∞ü‡±Å‡∞Ç‡∞¨ ID ‡∞ú‡∞®‡∞∞‡±á‡∞ü‡±ç ‡∞ö‡±á‡∞Ø‡∞Ç‡∞°‡∞ø",
    generatedTitle: "‡∞ú‡∞®‡∞∞‡±á‡∞ü‡±ç ‡∞ö‡±á‡∞∏‡∞ø‡∞® ‡∞ï‡±Å‡∞ü‡±Å‡∞Ç‡∞¨ ID",
    copyButton: "ID ‡∞ï‡∞æ‡∞™‡±Ä ‡∞ö‡±á‡∞Ø‡∞Ç‡∞°‡∞ø",
    noteText: "‡∞ó‡∞Æ‡∞®‡∞ø‡∞ï: ‡∞∞‡∞ø‡∞ï‡∞æ‡∞∞‡±ç‡∞°‡±Å‡∞≤‡∞®‡±Å ‡∞≤‡∞ø‡∞Ç‡∞ï‡±ç ‡∞ö‡±á‡∞Ø‡∞°‡∞æ‡∞®‡∞ø‡∞ï‡∞ø ‡∞à ‡∞ï‡±Å‡∞ü‡±Å‡∞Ç‡∞¨ ID‡∞®‡±Å ‡∞Ö‡∞®‡±ç‡∞®‡∞ø ‡∞ï‡±Å‡∞ü‡±Å‡∞Ç‡∞¨ ‡∞∏‡∞≠‡±ç‡∞Ø‡±Å‡∞≤‡∞§‡±ã ‡∞™‡∞Ç‡∞ö‡±Å‡∞ï‡±ã‡∞Ç‡∞°‡∞ø.",
    alertHeadId: "‡∞ï‡±Å‡∞ü‡±Å‡∞Ç‡∞¨ ‡∞™‡±ç‡∞∞‡∞ß‡∞æ‡∞®‡∞ø ‡∞∞‡±ã‡∞ó‡∞ø ID ‡∞®‡∞Æ‡±ã‡∞¶‡±Å ‡∞ö‡±á‡∞Ø‡∞Ç‡∞°‡∞ø",
    // Update Family Records
    updateFamilyTitle: "‡∞ï‡±Å‡∞ü‡±Å‡∞Ç‡∞¨ ‡∞∞‡∞ø‡∞ï‡∞æ‡∞∞‡±ç‡∞°‡±Å‡∞≤‡±Å ‡∞Ö‡∞™‡±ç‚Äå‡∞°‡±á‡∞ü‡±ç ‡∞ö‡±á‡∞Ø‡∞Ç‡∞°‡∞ø",
    updateFamilySubtitle: "‡∞ï‡±Å‡∞ü‡±Å‡∞Ç‡∞¨ ID‡∞®‡∞ø ‡∞â‡∞™‡∞Ø‡±ã‡∞ó‡∞ø‡∞Ç‡∞ö‡∞ø ‡∞Æ‡±ä‡∞§‡±ç‡∞§‡∞Ç ‡∞ï‡±Å‡∞ü‡±Å‡∞Ç‡∞¨ ‡∞Ü‡∞∞‡±ã‡∞ó‡±ç‡∞Ø ‡∞∞‡∞ø‡∞ï‡∞æ‡∞∞‡±ç‡∞°‡±Å‡∞≤‡∞®‡±Å ‡∞Ö‡∞™‡±ç‚Äå‡∞°‡±á‡∞ü‡±ç ‡∞ö‡±á‡∞Ø‡∞Ç‡∞°‡∞ø",
    familyIdPlaceholder: "‡∞ï‡±Å‡∞ü‡±Å‡∞Ç‡∞¨ ID ‡∞®‡∞Æ‡±ã‡∞¶‡±Å ‡∞ö‡±á‡∞Ø‡∞Ç‡∞°‡∞ø",
    searchFamily: "‡∞ï‡±Å‡∞ü‡±Å‡∞Ç‡∞¨‡∞æ‡∞®‡±ç‡∞®‡∞ø ‡∞∂‡±ã‡∞ß‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø",
    familyHeader: "‡∞ï‡±Å‡∞ü‡±Å‡∞Ç‡∞¨: ",
    membersCount: " ‡∞∏‡∞≠‡±ç‡∞Ø‡±Å‡∞≤‡±Å",
    headRole: "(‡∞™‡±ç‡∞∞‡∞ß‡∞æ‡∞®‡∞ø)",
    patientInfo: "‡∞∞‡±ã‡∞ó‡∞ø ID: {id} ‚Ä¢ {age} ‡∞∏‡∞Ç‡∞µ‡∞§‡±ç‡∞∏‡∞∞‡∞æ‡∞≤‡±Å ‚Ä¢ {gender}",
    bpLabel: "‡∞∞‡∞ï‡±ç‡∞§‡∞™‡±ã‡∞ü‡±Å",
    bpPlaceholder: "‡∞â‡∞¶‡∞æ., 120/80",
    sugarLabel: "‡∞∞‡∞ï‡±ç‡∞§ ‡∞∑‡±Å‡∞ó‡∞∞‡±ç",
    sugarPlaceholder: "‡∞â‡∞¶‡∞æ., 120 mg/dL",
    weightLabel: "‡∞¨‡∞∞‡±Å‡∞µ‡±Å",
    weightPlaceholder: "‡∞â‡∞¶‡∞æ., 65 kg",
    updateAll: "‡∞Ö‡∞®‡±ç‡∞®‡∞ø ‡∞∞‡∞ø‡∞ï‡∞æ‡∞∞‡±ç‡∞°‡±Å‡∞≤‡∞®‡±Å ‡∞Ö‡∞™‡±ç‚Äå‡∞°‡±á‡∞ü‡±ç ‡∞ö‡±á‡∞Ø‡∞Ç‡∞°‡∞ø",
    alertFamilyId: "‡∞ï‡±Å‡∞ü‡±Å‡∞Ç‡∞¨ ID ‡∞®‡∞Æ‡±ã‡∞¶‡±Å ‡∞ö‡±á‡∞Ø‡∞Ç‡∞°‡∞ø",
    successUpdate: "‡∞ï‡±Å‡∞ü‡±Å‡∞Ç‡∞¨ ‡∞∞‡∞ø‡∞ï‡∞æ‡∞∞‡±ç‡∞°‡±Å‡∞≤‡±Å ‡∞∏‡∞ï‡±ç‡∞∏‡±Ü‡∞∏‡±ç‚Äå‡∞´‡±Å‡∞≤‡±ç‚Äå‡∞ó‡∞æ ‡∞Ö‡∞™‡±ç‚Äå‡∞°‡±á‡∞ü‡±ç ‡∞Ö‡∞Ø‡±ç‡∞Ø‡∞æ‡∞Ø‡∞ø!",
    // Chatbot
    chatHeader: "AI ‡∞ö‡∞æ‡∞ü‡±ç‚Äå‡∞¨‡∞æ‡∞ü‡±ç",
    statusOnline: "‡∞Ü‡∞®‡±ç‚Äå‡∞≤‡±à‡∞®‡±ç",
    statusOffline: "‡∞Ü‡∞´‡±ç‚Äå‡∞≤‡±à‡∞®‡±ç",
    chatPlaceholder: "‡∞Æ‡±Ä ‡∞≤‡∞ï‡±ç‡∞∑‡∞£‡∞æ‡∞≤‡∞®‡±Å ‡∞á‡∞Ç‡∞ó‡±ç‡∞≤‡±Ä‡∞∑‡±ç ‡∞≤‡±á‡∞¶‡∞æ ‡∞π‡∞ø‡∞Ç‡∞¶‡±Ä‡∞≤‡±ã ‡∞µ‡∞ø‡∞µ‡∞∞‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø...",
    disclaimer: "‚ö†Ô∏è ‡∞á‡∞¶‡∞ø ‡∞µ‡±à‡∞¶‡±ç‡∞Ø ‡∞∏‡∞≤‡∞π‡∞æ ‡∞ï‡∞æ‡∞¶‡±Å. ‡∞Ü‡∞∞‡±ã‡∞ó‡±ç‡∞Ø ‡∞µ‡∞ø‡∞¶‡±ç‡∞Ø‡∞æ‡∞∞‡±ç‡∞•‡∞ø‡∞®‡∞ø ‡∞∏‡∞Ç‡∞™‡±ç‡∞∞‡∞¶‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø.",
    speakerPlay: "‡∞à ‡∞∏‡∞Ç‡∞¶‡±á‡∞∂‡∞æ‡∞®‡±ç‡∞®‡∞ø ‡∞µ‡∞ø‡∞®‡∞Ç‡∞°‡∞ø",
    speakerStop: "‡∞™‡±ç‡∞≤‡±á‡∞¨‡±ç‡∞Ø‡∞æ‡∞ï‡±ç ‡∞Ü‡∞™‡∞Ç‡∞°‡∞ø",
    micTitle: "‡∞π‡∞ø‡∞Ç‡∞¶‡±Ä‡∞≤‡±ã ‡∞Æ‡∞æ‡∞ü‡±ç‡∞≤‡∞æ‡∞°‡∞Ç‡∞°‡∞ø",
    sendIcon: "‚û§",
    speechNotSupported: "‡∞Æ‡±Ä ‡∞¨‡±ç‡∞∞‡±å‡∞ú‡∞∞‡±ç‚Äå‡∞≤‡±ã ‡∞∏‡±ç‡∞™‡±Ä‡∞ö‡±ç ‡∞∞‡∞ø‡∞ï‡∞ó‡±ç‡∞®‡∞ø‡∞∑‡∞®‡±ç ‡∞∏‡∞™‡±ã‡∞∞‡±ç‡∞ü‡±ç ‡∞≤‡±á‡∞¶‡±Å. ‡∞ï‡±ç‡∞∞‡±ã‡∞Æ‡±ç ‡∞≤‡±á‡∞¶‡∞æ ‡∞é‡∞°‡±ç‡∞ú‡±ç ‡∞â‡∞™‡∞Ø‡±ã‡∞ó‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø.",
    ttsNotSupported: "‡∞Æ‡±Ä ‡∞¨‡±ç‡∞∞‡±å‡∞ú‡∞∞‡±ç‚Äå‡∞≤‡±ã ‡∞ü‡±Ü‡∞ï‡±ç‡∞∏‡±ç‡∞ü‡±ç-‡∞ü‡±Å-‡∞∏‡±ç‡∞™‡±Ä‡∞ö‡±ç ‡∞∏‡∞™‡±ã‡∞∞‡±ç‡∞ü‡±ç ‡∞≤‡±á‡∞¶‡±Å.",
    audioError: "‡∞Ü‡∞°‡∞ø‡∞Ø‡±ã ‡∞™‡±ç‡∞≤‡±á ‡∞ö‡±á‡∞Ø‡∞°‡∞Ç‡∞≤‡±ã ‡∞é‡∞∞‡±ç‡∞∞‡∞∞‡±ç. ‡∞Æ‡∞≥‡±ç‡∞≤‡±Ä ‡∞ü‡±ç‡∞∞‡±à ‡∞ö‡±á‡∞Ø‡∞Ç‡∞°‡∞ø.",
    // Medicine Tracker
    phcTitle: "‡∞™‡±Ä‡∞π‡±Ü‡∞ö‡±ç‚Äå‡∞∏‡∞ø ‡∞Æ‡∞Ç‡∞¶‡±Å‡∞≤ ‡∞∏‡±ç‡∞ü‡∞æ‡∞ï‡±ç",
    phcSubtitle: "‡∞™‡±ç‡∞∞‡∞≠‡±Å‡∞§‡±ç‡∞µ ‡∞î‡∞∑‡∞ß‡∞æ‡∞≤ ‡∞∑‡∞æ‡∞™‡±Å‡∞≤‡±ã ‡∞Æ‡∞Ç‡∞¶‡±Å‡∞≤ ‡∞≤‡∞≠‡±ç‡∞Ø‡∞§‡∞®‡±Å ‡∞§‡∞®‡∞ø‡∞ñ‡±Ä ‡∞ö‡±á‡∞Ø‡∞Ç‡∞°‡∞ø",
    searchMedicines: "‡∞Æ‡∞Ç‡∞¶‡±Å‡∞≤‡∞®‡±Å ‡∞∂‡±ã‡∞ß‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø...",
    filterAll: "‡∞Ö‡∞®‡±ç‡∞®‡±Ä",
    filterLow: "‡∞§‡∞ï‡±ç‡∞ï‡±Å‡∞µ ‡∞∏‡±ç‡∞ü‡∞æ‡∞ï‡±ç",
    filterAdequate: "‡∞™‡∞∞‡±ç‡∞Ø‡∞æ‡∞™‡±ç‡∞§‡∞Ç",
    statusGood: "‡∞™‡∞∞‡±ç‡∞Ø‡∞æ‡∞™‡±ç‡∞§‡∞Ç",
    statusMedium: "‡∞Æ‡∞ß‡±ç‡∞Ø‡∞∏‡±ç‡∞•‡∞Ç",
    statusLow: "‡∞§‡∞ï‡±ç‡∞ï‡±Å‡∞µ ‡∞∏‡±ç‡∞ü‡∞æ‡∞ï‡±ç",
    requestMore: "‡∞á‡∞Ç‡∞ï‡∞æ ‡∞Ö‡∞≠‡±ç‡∞Ø‡∞∞‡±ç‡∞•‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø",
    reportIssue: "‡∞∏‡∞Æ‡∞∏‡±ç‡∞Ø‡∞®‡±Å ‡∞®‡∞ø‡∞µ‡±á‡∞¶‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø",
    // Health Library
    libraryTitle: "‡∞Ü‡∞∞‡±ã‡∞ó‡±ç‡∞Ø ‡∞µ‡∞ø‡∞¶‡±ç‡∞Ø ‡∞≤‡±à‡∞¨‡±ç‡∞∞‡∞∞‡±Ä",
    librarySubtitle: "‡∞∞‡±ã‡∞ó‡∞ø ‡∞∏‡∞Ç‡∞∞‡∞ï‡±ç‡∞∑‡∞£‡∞ï‡±Å ‡∞µ‡∞ø‡∞¶‡±ç‡∞Ø‡∞æ ‡∞∏‡∞æ‡∞ß‡∞®‡∞æ‡∞≤‡∞ï‡±Å ‡∞™‡±ç‡∞∞‡∞µ‡±á‡∞∂‡∞Ç",
    filterAllTopics: "‡∞Ö‡∞®‡±ç‡∞®‡∞ø ‡∞Ö‡∞Ç‡∞∂‡∞æ‡∞≤‡±Å",
    filterMaternal: "‡∞Æ‡∞æ‡∞§‡±É ‡∞∏‡∞Ç‡∞∞‡∞ï‡±ç‡∞∑‡∞£",
    filterChild: "‡∞¨‡∞æ‡∞≤ ‡∞∏‡∞Ç‡∞∞‡∞ï‡±ç‡∞∑‡∞£",
    filterChronic: "‡∞ï‡±ç‡∞∞‡∞æ‡∞®‡∞ø‡∞ï‡±ç ‡∞°‡∞ø‡∞∏‡±Ä‡∞ú‡±Ü‡∞∏‡±ç",
    readMore: "‡∞Æ‡∞∞‡∞ø‡∞®‡±ç‡∞®‡∞ø ‡∞ö‡∞¶‡∞µ‡∞Ç‡∞°‡∞ø",
    // Schedule
    scheduleTitle: "‡∞Ü‡∞∂‡∞æ ‡∞™‡∞®‡∞ø ‡∞∑‡±Ü‡∞°‡±ç‡∞Ø‡±Ç‡∞≤‡±ç",
    filterToday: "‡∞à ‡∞∞‡±ã‡∞ú‡±Å ‡∞™‡∞®‡±Å‡∞≤‡±Å",
    filterUpcoming: "‡∞∞‡∞æ‡∞¨‡±ã‡∞Ø‡±á‡∞µ‡∞ø",
    homeVisit: "‡∞π‡±ã‡∞Æ‡±ç ‡∞µ‡∞ø‡∞ú‡∞ø‡∞ü‡±ç",
    vaccinationDrive: "‡∞µ‡±ç‡∞Ø‡∞æ‡∞ï‡±ç‡∞∏‡∞ø‡∞®‡±á‡∞∑‡∞®‡±ç ‡∞°‡±ç‡∞∞‡±à‡∞µ‡±ç",
    healthCamp: "‡∞Ü‡∞∞‡±ã‡∞ó‡±ç‡∞Ø ‡∞ï‡±ç‡∞Ø‡∞æ‡∞Ç‡∞™‡±ç",
    followUp: "‡∞´‡∞æ‡∞≤‡±ã-‡∞Ö‡∞™‡±ç ‡∞µ‡∞ø‡∞ú‡∞ø‡∞ü‡±ç",
    completed: "‡∞™‡±Ç‡∞∞‡±ç‡∞§‡∞ø",
    pending: "‡∞™‡±Ü‡∞Ç‡∞°‡∞ø‡∞Ç‡∞ó‡±ç",
    tasksPerformed: "‡∞ö‡±á‡∞Ø‡∞æ‡∞≤‡±ç‡∞∏‡∞ø‡∞® ‡∞™‡∞®‡±Å‡∞≤‡±Å:",
    markComplete: "‡∞™‡±Ç‡∞∞‡±ç‡∞§‡∞ø ‡∞Ö‡∞®‡∞ø ‡∞ó‡±Å‡∞∞‡±ç‡∞§‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø",
    reschedule: "‡∞™‡±Å‡∞®‡∞É‡∞®‡∞ø‡∞∞‡±ç‡∞£‡∞Ø‡∞Ç ‡∞ö‡±á‡∞Ø‡∞Ç‡∞°‡∞ø",
    noTasksTitle: "‡∞é‡∞ü‡±Å‡∞µ‡∞Ç‡∞ü‡∞ø ‡∞™‡∞®‡±Å‡∞≤‡±Å ‡∞∑‡±Ü‡∞°‡±ç‡∞Ø‡±Ç‡∞≤‡±ç ‡∞ö‡±á‡∞Ø‡∞¨‡∞°‡∞≤‡±á‡∞¶‡±Å",
    noTasksSubtitle: "‡∞à ‡∞ï‡∞æ‡∞≤‡∞æ‡∞®‡∞ø‡∞ï‡∞ø ‡∞é‡∞ü‡±Å‡∞µ‡∞Ç‡∞ü‡∞ø ‡∞™‡∞®‡±Å‡∞≤‡±Å ‡∞∑‡±Ü‡∞°‡±ç‡∞Ø‡±Ç‡∞≤‡±ç ‡∞ö‡±á‡∞Ø‡∞¨‡∞°‡∞≤‡±á‡∞¶‡±Å",
    todayTasks: "‡∞à ‡∞∞‡±ã‡∞ú‡±Å ‡∞™‡∞®‡±Å‡∞≤‡±Å",
    highPriority: "‡∞Ö‡∞ß‡∞ø‡∞ï ‡∞™‡±ç‡∞∞‡∞æ‡∞ß‡∞æ‡∞®‡±ç‡∞Ø‡∞§",
    // Notifications
    notifTitle: "‡∞®‡±ã‡∞ü‡∞ø‡∞´‡∞ø‡∞ï‡±á‡∞∑‡∞®‡±ç‡∞≤‡±Å",
    notifSubtitle: "‡∞Æ‡±Ä ‡∞á‡∞ü‡±Ä‡∞µ‡∞≤‡∞ø ‡∞Ö‡∞≤‡∞∞‡±ç‡∞ü‡±ç‚Äå‡∞≤‡±Å ‡∞Æ‡∞∞‡∞ø‡∞Ø‡±Å ‡∞Ö‡∞™‡±ç‚Äå‡∞°‡±á‡∞ü‡±ç‚Äå‡∞≤‡±Å",
    // Bottom Nav
    home: "‡∞π‡±ã‡∞Æ‡±ç",
    records: "‡∞∞‡∞ø‡∞ï‡∞æ‡∞∞‡±ç‡∞°‡±Å‡∞≤‡±Å",
    familyIdNav: "‡∞ï‡±Å‡∞ü‡±Å‡∞Ç‡∞¨ ID",
    scheduleNav: "‡∞∑‡±Ü‡∞°‡±ç‡∞Ø‡±Ç‡∞≤‡±ç",
    // Quick Actions Subtitles
    registerPatientSub: "‡∞Æ‡±Ä ‡∞∏‡∞Ç‡∞∞‡∞ï‡±ç‡∞∑‡∞£‡∞≤‡±ã ‡∞ï‡±ä‡∞§‡±ç‡∞§ ‡∞∞‡±ã‡∞ó‡∞ø‡∞®‡∞ø ‡∞ú‡±ã‡∞°‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø",
    symptomCheckSub: "AI-‡∞Ü‡∞ß‡∞æ‡∞∞‡∞ø‡∞§ ‡∞Ü‡∞∞‡±ã‡∞ó‡±ç‡∞Ø ‡∞Æ‡±Ç‡∞≤‡±ç‡∞Ø‡∞æ‡∞Ç‡∞ï‡∞®‡∞Ç",
    medicineStockSub: "‡∞™‡±Ä‡∞π‡±Ü‡∞ö‡±ç‚Äå‡∞∏‡∞ø ‡∞Æ‡∞Ç‡∞¶‡±Å‡∞≤ ‡∞≤‡∞≠‡±ç‡∞Ø‡∞§‡∞®‡±Å ‡∞§‡∞®‡∞ø‡∞ñ‡±Ä ‡∞ö‡±á‡∞Ø‡∞Ç‡∞°‡∞ø",
    updateHealthRecordSub: "‡∞∞‡±ã‡∞ó‡∞ø ‡∞Ü‡∞∞‡±ã‡∞ó‡±ç‡∞Ø ‡∞∏‡∞Æ‡∞æ‡∞ö‡∞æ‡∞∞‡∞æ‡∞®‡±ç‡∞®‡∞ø ‡∞Ö‡∞™‡±ç‚Äå‡∞°‡±á‡∞ü‡±ç ‡∞ö‡±á‡∞Ø‡∞Ç‡∞°‡∞ø",
    generateFamilyIdSub: "‡∞∞‡∞ø‡∞ï‡∞æ‡∞∞‡±ç‡∞°‡±Å‡∞≤ ‡∞ï‡±ã‡∞∏‡∞Ç ‡∞ï‡±Å‡∞ü‡±Å‡∞Ç‡∞¨ ‡∞ó‡±ç‡∞∞‡±Ç‡∞™‡±ç‚Äå‡∞®‡±Å ‡∞∏‡±É‡∞∑‡±ç‡∞ü‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø",
    healthLibrarySub: "‡∞µ‡∞ø‡∞¶‡±ç‡∞Ø‡∞æ ‡∞∏‡∞æ‡∞ß‡∞®‡∞æ‡∞≤‡±Å ‡∞Æ‡∞∞‡∞ø‡∞Ø‡±Å ‡∞Ö‡∞ß‡∞ø‡∞ï‡∞æ‡∞∞‡∞ø‡∞ï ‡∞™‡±Ä‡∞π‡±Ü‡∞ö‡±ç‚Äå‡∞∏‡∞ø ‡∞µ‡±Ä‡∞°‡∞ø‡∞Ø‡±ã‡∞≤‡∞ï‡±Å ‡∞™‡±ç‡∞∞‡∞µ‡±á‡∞∂‡∞Ç",
    // Welcome Actions
    registerNewPatient: "‡∞ï‡±ä‡∞§‡±ç‡∞§ ‡∞∞‡±ã‡∞ó‡∞ø‡∞®‡∞ø ‡∞∞‡∞ø‡∞ú‡∞ø‡∞∏‡±ç‡∞ü‡∞∞‡±ç ‡∞ö‡±á‡∞Ø‡∞Ç‡∞°‡∞ø",
    updateHealthRecords: "‡∞Ü‡∞∞‡±ã‡∞ó‡±ç‡∞Ø ‡∞∞‡∞ø‡∞ï‡∞æ‡∞∞‡±ç‡∞°‡±Å‡∞≤‡∞®‡±Å ‡∞Ö‡∞™‡±ç‚Äå‡∞°‡±á‡∞ü‡±ç ‡∞ö‡±á‡∞Ø‡∞Ç‡∞°‡∞ø"
  }
};
const LoginPage = ({ onLogin, currentLanguage }) => {
  const [ashaId, setAshaId] = useState('');
  const [dob, setDob] = useState('');
  const [error, setError] = useState('');
  const handleSubmit = (e) => {
    e.preventDefault();
  
    if (!ashaId.trim() || !dob) {
      setError(translations[currentLanguage].errorBoth);
      return;
    }
    if (ashaId.length < 3) {
      setError(translations[currentLanguage].errorId);
      return;
    }
    onLogin({ ashaId, dob });
  };
  return (
    <div className="login-container">
      <div className="login-card">
        <div className="login-header">
          <div className="login-logo">
            <h1>{translations[currentLanguage].appTitle}</h1>
            <div className="logo-icon">üè•</div>
          </div>
          <h2>{translations[currentLanguage].loginTitle}</h2>
          <p>{translations[currentLanguage].loginSubtitle}</p>
        </div>
        <form onSubmit={handleSubmit} className="login-form">
          {error && (
            <div className="error-message">
              <AlertCircle size={16} />
              {error}
            </div>
          )}
          <div className="form-group">
            <label htmlFor="ashaId">{translations[currentLanguage].labelAshaId}</label>
            <input
              type="text"
              id="ashaId"
              value={ashaId}
              onChange={(e) => setAshaId(e.target.value)}
              placeholder={translations[currentLanguage].placeholderAshaId}
              required
            />
          </div>
          <div className="form-group">
            <label htmlFor="dob">{translations[currentLanguage].labelDob}</label>
            <input
              type="date"
              id="dob"
              value={dob}
              onChange={(e) => setDob(e.target.value)}
              required
            />
          </div>
          <button type="submit" className="login-btn">
            <Key size={18} />
            {translations[currentLanguage].loginButton}
          </button>
        </form>
        <div className="login-footer">
          <p>{translations[currentLanguage].helpText}</p>
        </div>
      </div>
    </div>
  );
};
// Family ID Generator Component
const FamilyIdGenerator = () => {
  const [headPatientId, setHeadPatientId] = useState('');
  const [isHofVerified, setIsHofVerified] = useState(false);
  const [verificationStatus, setVerificationStatus] = useState(''); // 'verifying', 'verified', 'failed'
  const [familyMembers, setFamilyMembers] = useState([
    { patientId: '', relation: '' }
  ]);
  const [generatedId, setGeneratedId] = useState('');
  // Mock function to verify Head of Family ID
  const verifyHeadOfFamily = async () => {
    if (!headPatientId.trim()) {
      alert('Please enter Head of Family Patient ID');
      return;
    }
    setVerificationStatus('verifying');
   
    // Simulate API call to verify patient ID
    try {
      // Mock verification - in real app, this would be an API call
      await new Promise(resolve => setTimeout(resolve, 1500));
     
      // Simulate successful verification for demo
      // In real app, check response from backend
      const isValid = headPatientId.length >= 3; // Simple validation for demo
     
      if (isValid) {
        setIsHofVerified(true);
        setVerificationStatus('verified');
      } else {
        setIsHofVerified(false);
        setVerificationStatus('failed');
        alert('Invalid Head of Family Patient ID. Please check and try again.');
      }
    } catch (error) {
      setIsHofVerified(false);
      setVerificationStatus('failed');
      alert('Verification failed. Please try again.');
    }
  };
  const resetVerification = () => {
    setIsHofVerified(false);
    setVerificationStatus('');
    setHeadPatientId('');
    setFamilyMembers([{ patientId: '', relation: '' }]);
  };
  const addFamilyMember = () => {
    if (isHofVerified) {
      setFamilyMembers([...familyMembers, { patientId: '', relation: '' }]);
    }
  };
  const removeFamilyMember = (index) => {
    if (familyMembers.length > 1) {
      const updated = familyMembers.filter((_, i) => i !== index);
      setFamilyMembers(updated);
    }
  };
  const updateFamilyMember = (index, field, value) => {
    const updated = familyMembers.map((member, i) =>
      i === index ? { ...member, [field]: value } : member
    );
    setFamilyMembers(updated);
  };
  const generateFamilyId = () => {
    if (!isHofVerified) {
      alert('Please verify Head of Family ID first');
      return;
    }
    if (!headPatientId.trim()) {
      alert('Please enter Head of Family Patient ID');
      return;
    }
    // Validate family members
    const validMembers = familyMembers.filter(member =>
      member.patientId.trim() && member.relation.trim()
    );
    if (validMembers.length === 0) {
      alert('Please add at least one family member with Patient ID and Relation');
      return;
    }
    const timestamp = new Date().getTime().toString(36);
    const random = Math.random().toString(36).substr(2, 5);
    const familyId = `FAM-${headPatientId.toUpperCase()}-${timestamp}-${random}`.toUpperCase();
   
    setGeneratedId(familyId);
  };
  return (
    <div className="tab-content">
      <div className="tab-header">
        <h2>Generate Family ID</h2>
        <p>Create a unique family ID to link family members together</p>
      </div>
      <section className="section">
        <div className="family-form">
          {/* Head of Family Section */}
          <div className="hof-section">
            <div className="section-header">
              <h4>Head of Family Verification</h4>
              {isHofVerified && (
                <span className="verification-badge verified">
                  <CheckCircle size={16} />
                  Verified
                </span>
              )}
            </div>
           
            <div className="hof-input-group">
              <div className="form-group full-width">
                <label>Head of Family Patient ID *</label>
                <div className="input-with-verification">
                  <input
                    type="text"
                    value={headPatientId}
                    onChange={(e) => {
                      setHeadPatientId(e.target.value);
                      // Reset verification if ID changes
                      if (isHofVerified) {
                        setIsHofVerified(false);
                        setVerificationStatus('');
                      }
                    }}
                    placeholder="Enter patient ID of family head"
                    required
                    disabled={verificationStatus === 'verifying'}
                  />
                  {!isHofVerified && (
                    <button
                      type="button"
                      onClick={verifyHeadOfFamily}
                      disabled={!headPatientId.trim() || verificationStatus === 'verifying'}
                      className="verify-btn"
                    >
                      {verificationStatus === 'verifying' ? (
                        <>Verifying...</>
                      ) : (
                        <>Verify ID</>
                      )}
                    </button>
                  )}
                  {isHofVerified && (
                    <button
                      type="button"
                      onClick={resetVerification}
                      className="reset-verification-btn"
                    >
                      <XCircle size={16} />
                      Change ID
                    </button>
                  )}
                </div>
                {verificationStatus === 'failed' && (
                  <p className="error-text">Invalid Patient ID. Please check and try again.</p>
                )}
              </div>
            </div>
          </div>
          {/* Family Members Section - Only show if HOF is verified */}
          {isHofVerified && (
            <div className="family-members-section">
              <div className="section-header">
                <h4>Family Members</h4>
                <button
                  type="button"
                  onClick={addFamilyMember}
                  className="btn-outline"
                >
                  <Plus size={16} />
                  Add Member
                </button>
              </div>
              <div className="members-list">
                {familyMembers.map((member, index) => (
                  <div key={index} className="family-member-row">
                    <div className="form-group">
                      <label>Patient ID</label>
                      <input
                        type="text"
                        value={member.patientId}
                        onChange={(e) => updateFamilyMember(index, 'patientId', e.target.value)}
                        placeholder="Enter patient ID"
                      />
                    </div>
                    <div className="form-group">
                      <label>Relation to Head</label>
                      <select
                        value={member.relation}
                        onChange={(e) => updateFamilyMember(index, 'relation', e.target.value)}
                      >
                        <option value="">Select Relation</option>
                        <option value="spouse">Spouse</option>
                        <option value="child">Child</option>
                        <option value="parent">Parent</option>
                        <option value="sibling">Sibling</option>
                        <option value="grandchild">Grandchild</option>
                        <option value="other">Other</option>
                      </select>
                    </div>
                    {familyMembers.length > 1 && (
                      <button
                        type="button"
                        onClick={() => removeFamilyMember(index)}
                        className="remove-member-btn"
                        title="Remove member"
                      >
                        <Trash2 size={16} />
                      </button>
                    )}
                  </div>
                ))}
              </div>
              <div className="form-actions">
                <button
                  type="button"
                  onClick={generateFamilyId}
                  className="btn-primary"
                >
                  <FolderPlus size={16} />
                  Generate Family ID
                </button>
              </div>
            </div>
          )}
          {generatedId && (
            <div className="generated-id-section">
              <h4>Generated Family ID</h4>
              <div className="family-id-display">
                <code>{generatedId}</code>
                <button
                  onClick={() => navigator.clipboard.writeText(generatedId)}
                  className="btn-sm primary"
                >
                  Copy ID
                </button>
              </div>
              <p className="note">
                Note: Share this Family ID with all family members for linking their records.
              </p>
            </div>
          )}
        </div>
      </section>
    </div>
  );
};
// Update Family Records Component
const UpdateFamilyRecords = ({ currentLanguage }) => {
  const [familyId, setFamilyId] = useState('');
  const [familyData, setFamilyData] = useState(null);
  const [updates, setUpdates] = useState({});
  const fetchFamilyData = () => {
    if (!familyId.trim()) {
      alert(translations[currentLanguage].alertFamilyId);
      return;
    }
    const mockFamilyData = {
      familyId: familyId,
      head: {
        name: 'Ramesh Kumar',
        patientId: 'PAT002',
        age: 65,
        gender: 'Male'
      },
      members: [
        { name: 'Sita Devi', patientId: 'PAT003', relation: 'spouse', age: 62, gender: 'Female' },
        { name: 'Amit Kumar', patientId: 'PAT004', relation: 'child', age: 35, gender: 'Male' },
        { name: 'Priya Kumar', patientId: 'PAT005', relation: 'child', age: 32, gender: 'Female' }
      ]
    };
    setFamilyData(mockFamilyData);
  };
  const handleUpdate = (patientId, field, value) => {
    setUpdates(prev => ({
      ...prev,
      [patientId]: {
        ...prev[patientId],
        [field]: value
      }
    }));
  };
  const submitUpdates = () => {
    console.log('Updates to submit:', updates);
    alert(translations[currentLanguage].successUpdate);
    setUpdates({});
  };
  return (
    <div className="tab-content">
      <div className="tab-header">
        <h2>{translations[currentLanguage].updateFamilyTitle}</h2>
        <p>{translations[currentLanguage].updateFamilySubtitle}</p>
      </div>
      <section className="section">
        <div className="family-search">
          <div className="search-box">
            <Search size={18} />
            <input
              type="text"
              value={familyId}
              onChange={(e) => setFamilyId(e.target.value)}
              placeholder={translations[currentLanguage].familyIdPlaceholder}
            />
            <button onClick={fetchFamilyData} className="btn-primary">
              {translations[currentLanguage].searchFamily}
            </button>
          </div>
        </div>
        {familyData && (
          <div className="family-records">
            <div className="family-header">
              <h3>{translations[currentLanguage].familyHeader}{familyData.familyId}</h3>
              <div className="family-stats">
                <span>{familyData.members.length + 1} {translations[currentLanguage].membersCount}</span>
              </div>
            </div>
            <div className="family-members-list">
              <div className="family-member-card">
                <div className="member-header">
                  <div className="member-info">
                    <UsersIcon size={20} />
                    <div>
                      <h4>{familyData.head.name} {translations[currentLanguage].headRole}</h4>
                      <p>{translations[currentLanguage].patientInfo.replace('{id}', familyData.head.patientId).replace('{age}', familyData.head.age).replace('{gender}', familyData.head.gender)}</p>
                    </div>
                  </div>
                </div>
                <div className="health-updates">
                  <div className="form-grid">
                    <div className="form-group">
                      <label>{translations[currentLanguage].bpLabel}</label>
                      <input
                        type="text"
                        placeholder={translations[currentLanguage].bpPlaceholder}
                        onChange={(e) => handleUpdate(familyData.head.patientId, 'bp', e.target.value)}
                      />
                    </div>
                    <div className="form-group">
                      <label>{translations[currentLanguage].sugarLabel}</label>
                      <input
                        type="text"
                        placeholder={translations[currentLanguage].sugarPlaceholder}
                        onChange={(e) => handleUpdate(familyData.head.patientId, 'sugar', e.target.value)}
                      />
                    </div>
                    <div className="form-group">
                      <label>{translations[currentLanguage].weightLabel}</label>
                      <input
                        type="text"
                        placeholder={translations[currentLanguage].weightPlaceholder}
                        onChange={(e) => handleUpdate(familyData.head.patientId, 'weight', e.target.value)}
                      />
                    </div>
                  </div>
                </div>
              </div>
              {familyData.members.map((member, index) => (
                <div key={member.patientId} className="family-member-card">
                  <div className="member-header">
                    <div className="member-info">
                      <User size={20} />
                      <div>
                        <h4>{member.name} ({member.relation})</h4>
                        <p>{translations[currentLanguage].patientInfo.replace('{id}', member.patientId).replace('{age}', member.age).replace('{gender}', member.gender)}</p>
                      </div>
                    </div>
                  </div>
                  <div className="health-updates">
                    <div className="form-grid">
                      <div className="form-group">
                        <label>{translations[currentLanguage].bpLabel}</label>
                        <input
                          type="text"
                          placeholder={translations[currentLanguage].bpPlaceholder}
                          onChange={(e) => handleUpdate(member.patientId, 'bp', e.target.value)}
                        />
                      </div>
                      <div className="form-group">
                        <label>{translations[currentLanguage].sugarLabel}</label>
                        <input
                          type="text"
                          placeholder={translations[currentLanguage].sugarPlaceholder}
                          onChange={(e) => handleUpdate(member.patientId, 'sugar', e.target.value)}
                        />
                      </div>
                      <div className="form-group">
                        <label>{translations[currentLanguage].weightLabel}</label>
                        <input
                          type="text"
                          placeholder={translations[currentLanguage].weightPlaceholder}
                          onChange={(e) => handleUpdate(member.patientId, 'weight', e.target.value)}
                        />
                      </div>
                    </div>
                  </div>
                </div>
              ))}
            </div>
            <div className="form-actions">
              <button onClick={submitUpdates} className="btn-primary">
                <FileText size={16} />
                {translations[currentLanguage].updateAll}
              </button>
            </div>
          </div>
        )}
      </section>
    </div>
  );
};
const ChatBot = ({ isOpen, onClose, currentLanguage }) => {
    const [messages, setMessages] = useState([
        {
            type: 'bot',
            content: 'Hello! I\'m your symptom checker assistant. Please describe your symptoms and I\'ll try to help you understand them better. Remember, I\'m not a replacement for professional medical advice.',
            timestamp: new Date()
        }
    ])
    const [inputValue, setInputValue] = useState('')
    const [isTyping, setIsTyping] = useState(false)
    const [isOnline, setIsOnline] = useState(navigator.onLine)
    const [isListening, setIsListening] = useState(false)
    const [isSpeaking, setIsSpeaking] = useState(false)
    const messagesEndRef = React.useRef(null)
    const recognitionRef = React.useRef(null)
    const speechSynthesisRef = React.useRef(null)
    const offlineSymptomsHindi = {
        '‡§Ø‡•ã‡§ú‡§®‡§æ': {
            info: '‡§π‡§æ‡§Å ,‡§ú‡•à‡§∏‡§æ ‡§ï‡§ø ‡§ê‡§™ ‡§ï‡•á ‡§®‡§µ‡•Ä‡§®‡§§‡§Æ ‡§Ö‡§™‡§°‡•á‡§ü ‡§î‡§∞ ‡§∏‡§∞‡§ï‡§æ‡§∞‡•Ä ‡§Ø‡•ã‡§ú‡§®‡§æ‡§ì‡§Ç ‡§ï‡•á ‡§Ö‡§®‡•Å‡§≠‡§æ‡§ó ‡§Æ‡•á‡§Ç ‡§≤‡§ø‡§ñ‡§æ ‡§ó‡§Ø‡§æ ‡§π‡•à ‡§ï‡§ø ‡§Ü‡§Ø‡•Å‡§∑‡•ç‡§Æ‡§æ‡§® ‡§≠‡§æ‡§∞‡§§ ‡§ï‡•á ‡§Ö‡§Ç‡§§‡§∞‡•ç‡§ó‡§§ 70 ‡§µ‡§∞‡•ç‡§∑ ‡§Ø‡§æ ‡§â‡§∏‡§∏‡•á ‡§Ö‡§ß‡§ø‡§ï ‡§Ü‡§Ø‡•Å ‡§ï‡•á ‡§®‡§æ‡§ó‡§∞‡§ø‡§ï, ‡§ö‡§æ‡§π‡•á ‡§â‡§®‡§ï‡•Ä ‡§Ü‡§∞‡•ç‡§•‡§ø‡§ï ‡§∏‡•ç‡§•‡§ø‡§§‡§ø ‡§ï‡•Å‡§õ ‡§≠‡•Ä ‡§π‡•ã, ‡§Ö‡§¨ ‡§Ü‡§Ø‡•Å‡§∑‡•ç‡§Æ‡§æ‡§® ‡§µ‡§Ø ‡§µ‡§Ç‡§¶‡§®‡§æ ‡§ï‡§æ‡§∞‡•ç‡§° ‡§ï‡•á ‡§Æ‡§æ‡§ß‡•ç‡§Ø‡§Æ ‡§∏‡•á 5 ‡§≤‡§æ‡§ñ ‡§∞‡•Å‡§™‡§Ø‡•á ‡§§‡§ï ‡§ï‡•á ‡§Æ‡•Å‡§´‡•ç‡§§ ‡§á‡§≤‡§æ‡§ú ‡§ï‡•á ‡§≤‡§ø‡§è ‡§™‡§æ‡§§‡•ç‡§∞ ‡§π‡•à‡§Ç‡•§',
            suggestions: ['‡§Ö‡§™‡§®‡•á ‡§®‡§ú‡§¶‡•Ä‡§ï‡•Ä ‡§∏‡§∞‡§ï‡§æ‡§∞‡•Ä ‡§Ö‡§∏‡•ç‡§™‡§§‡§æ‡§≤, ‡§∏‡•Ä‡§è‡§∏‡§∏‡•Ä (‡§ï‡•â‡§Æ‡§® ‡§∏‡§∞‡•ç‡§µ‡§ø‡§∏ ‡§∏‡•á‡§Ç‡§ü‡§∞), ‡§Ø‡§æ ‡§™‡•Ä‡§è‡§ö‡§∏‡•Ä ‡§Æ‡•á‡§Ç ‡§ú‡§æ‡§ï‡§∞ ‡§™‡§Ç‡§ú‡•Ä‡§ï‡§∞‡§£ ‡§ï‡§∞‡§æ‡§è‡§Ç ‡§î‡§∞ ‡§Ö‡§™‡§®‡§æ ‡§Ü‡§Ø‡•Å‡§∑‡•ç‡§Æ‡§æ‡§® ‡§ï‡§æ‡§∞‡•ç‡§° ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§ï‡§∞‡•á‡§Ç‡•§‡§Ü‡§ß‡§æ‡§∞, ‡§Ü‡§Ø‡•Å ‡§™‡•ç‡§∞‡§Æ‡§æ‡§£ ‡§î‡§∞ ‡§™‡§§‡§æ ‡§™‡•ç‡§∞‡§Æ‡§æ‡§£ ‡§≤‡•á‡§ï‡§∞ ‡§ú‡§æ‡§è‡§Å ‚Äî ‡§™‡§Ç‡§ú‡•Ä‡§ï‡§∞‡§£ ‡§§‡•á‡§ú‡§º ‡§î‡§∞ ‡§Æ‡•Å‡§´‡•ç‡§§ ‡§π‡•à‡•§']
        },
        '‡§∏‡§ø‡§∞‡§¶‡§∞‡•ç‡§¶': {
            info: '‡§∏‡§ø‡§∞‡§¶‡§∞‡•ç‡§¶ ‡§§‡§®‡§æ‡§µ, ‡§®‡§ø‡§∞‡•ç‡§ú‡§≤‡•Ä‡§ï‡§∞‡§£, ‡§Ü‡§Ç‡§ñ‡•ã‡§Ç ‡§ï‡•á ‡§§‡§®‡§æ‡§µ ‡§Ø‡§æ ‡§®‡•Ä‡§Ç‡§¶ ‡§ï‡•Ä ‡§ï‡§Æ‡•Ä ‡§ï‡•á ‡§ï‡§æ‡§∞‡§£ ‡§π‡•ã ‡§∏‡§ï‡§§‡§æ ‡§π‡•à‡•§ ‡§è‡§ï ‡§∂‡§æ‡§Ç‡§§, ‡§Ö‡§Ç‡§ß‡•á‡§∞‡•á ‡§ï‡§Æ‡§∞‡•á ‡§Æ‡•á‡§Ç ‡§Ü‡§∞‡§æ‡§Æ ‡§ï‡§∞‡§®‡•á ‡§î‡§∞ ‡§π‡§æ‡§á‡§°‡•ç‡§∞‡•á‡§ü‡•á‡§° ‡§∞‡§π‡§®‡•á ‡§ï‡§æ ‡§™‡•ç‡§∞‡§Ø‡§æ‡§∏ ‡§ï‡§∞‡•á‡§Ç‡•§',
            suggestions: ['‡§Ö‡§Ç‡§ß‡•á‡§∞‡•á ‡§ï‡§Æ‡§∞‡•á ‡§Æ‡•á‡§Ç ‡§Ü‡§∞‡§æ‡§Æ ‡§ï‡§∞‡•á‡§Ç', '‡§π‡§æ‡§á‡§°‡•ç‡§∞‡•á‡§ü‡•á‡§° ‡§∞‡§π‡•á‡§Ç', '‡§†‡§Ç‡§°‡§æ ‡§∏‡•á‡§ï ‡§≤‡§ó‡§æ‡§è‡§Ç', '‡§ì‡§µ‡§∞-‡§¶-‡§ï‡§æ‡§â‡§Ç‡§ü‡§∞ ‡§¶‡§∞‡•ç‡§¶ ‡§®‡§ø‡§µ‡§æ‡§∞‡§ï ‡§™‡§∞ ‡§µ‡§ø‡§ö‡§æ‡§∞ ‡§ï‡§∞‡•á‡§Ç']
        },
        '‡§¨‡•Å‡§ñ‡§æ‡§∞': {
            info: '‡§¨‡•Å‡§ñ‡§æ‡§∞ ‡§Ö‡§ï‡•ç‡§∏‡§∞ ‡§è‡§ï ‡§∏‡§Ç‡§ï‡•á‡§§ ‡§π‡•à ‡§ï‡§ø ‡§Ü‡§™‡§ï‡§æ ‡§∂‡§∞‡•Ä‡§∞ ‡§∏‡§Ç‡§ï‡•ç‡§∞‡§Æ‡§£ ‡§∏‡•á ‡§≤‡§°‡§º ‡§∞‡§π‡§æ ‡§π‡•à‡•§ ‡§Ö‡§™‡§®‡•á ‡§§‡§æ‡§™‡§Æ‡§æ‡§® ‡§ï‡•Ä ‡§®‡§ø‡§ó‡§∞‡§æ‡§®‡•Ä ‡§ï‡§∞‡•á‡§Ç ‡§î‡§∞ ‡§π‡§æ‡§á‡§°‡•ç‡§∞‡•á‡§ü‡•á‡§° ‡§∞‡§π‡•á‡§Ç‡•§',
            suggestions: ['‡§Ü‡§∞‡§æ‡§Æ ‡§î‡§∞ ‡§®‡•Ä‡§Ç‡§¶ ‡§≤‡•á‡§Ç', '‡§≠‡§∞‡§™‡•Ç‡§∞ ‡§§‡§∞‡§≤ ‡§™‡§¶‡§æ‡§∞‡•ç‡§• ‡§™‡§ø‡§è‡§Ç', '‡§®‡§ø‡§Ø‡§Æ‡§ø‡§§ ‡§∞‡•Ç‡§™ ‡§∏‡•á ‡§§‡§æ‡§™‡§Æ‡§æ‡§® ‡§≤‡•á‡§Ç', '‡§Ø‡§¶‡§ø ‡§¨‡•Å‡§ñ‡§æ‡§∞ ‡§Ö‡§ß‡§ø‡§ï ‡§Ø‡§æ ‡§≤‡§ó‡§æ‡§§‡§æ‡§∞ ‡§π‡•à ‡§§‡•ã ‡§ö‡§ø‡§ï‡§ø‡§§‡•ç‡§∏‡§ï ‡§ï‡•Ä ‡§∏‡§≤‡§æ‡§π ‡§≤‡•á‡§Ç']
        },
        '‡§ñ‡§æ‡§Ç‡§∏‡•Ä': {
            info: '‡§ñ‡§æ‡§Ç‡§∏‡•Ä ‡§∏‡•Ç‡§ñ‡•Ä ‡§Ø‡§æ ‡§â‡§§‡•ç‡§™‡§æ‡§¶‡§ï ‡§π‡•ã ‡§∏‡§ï‡§§‡•Ä ‡§π‡•à ‡§î‡§∞ ‡§Ø‡§π ‡§∏‡§Ç‡§ï‡•ç‡§∞‡§Æ‡§£, ‡§è‡§≤‡§∞‡•ç‡§ú‡•Ä ‡§Ø‡§æ ‡§ú‡§≤‡§® ‡§ï‡•á ‡§ï‡§æ‡§∞‡§£ ‡§π‡•ã ‡§∏‡§ï‡§§‡•Ä ‡§π‡•à‡•§',
            suggestions: ['‡§π‡§æ‡§á‡§°‡•ç‡§∞‡•á‡§ü‡•á‡§° ‡§∞‡§π‡•á‡§Ç', '‡§Ü‡§∞‡§æ‡§Æ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§∂‡§π‡§¶ ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡•á‡§Ç', '‡§ú‡§≤‡§® ‡§™‡•à‡§¶‡§æ ‡§ï‡§∞‡§®‡•á ‡§µ‡§æ‡§≤‡•Ä ‡§ö‡•Ä‡§ú‡•ã‡§Ç ‡§∏‡•á ‡§¨‡§ö‡•á‡§Ç', '‡§Ø‡§¶‡§ø ‡§≤‡§ó‡§æ‡§§‡§æ‡§∞ ‡§ñ‡§æ‡§Ç‡§∏‡•Ä ‡§π‡•à ‡§§‡•ã ‡§°‡•â‡§ï‡•ç‡§ü‡§∞ ‡§∏‡•á ‡§Æ‡§ø‡§≤‡•á‡§Ç']
        },
        '‡§ó‡§≤‡•á ‡§Æ‡•á‡§Ç ‡§ñ‡§∞‡§æ‡§∂': {
            info: '‡§ó‡§≤‡•á ‡§Æ‡•á‡§Ç ‡§ñ‡§∞‡§æ‡§∂ ‡§Ü‡§Æ‡§§‡•å‡§∞ ‡§™‡§∞ ‡§µ‡§æ‡§Ø‡§∞‡§≤ ‡§∏‡§Ç‡§ï‡•ç‡§∞‡§Æ‡§£, ‡§¨‡•à‡§ï‡•ç‡§ü‡•Ä‡§∞‡§ø‡§Ø‡§≤ ‡§∏‡§Ç‡§ï‡•ç‡§∞‡§Æ‡§£ ‡§Ø‡§æ ‡§ú‡§≤‡§® ‡§ï‡•á ‡§ï‡§æ‡§∞‡§£ ‡§π‡•ã‡§§‡•Ä ‡§π‡•à‡•§',
            suggestions: ['‡§ó‡§∞‡•ç‡§Æ ‡§®‡§Æ‡§ï ‡§ï‡•á ‡§™‡§æ‡§®‡•Ä ‡§∏‡•á ‡§ó‡§∞‡§æ‡§∞‡•á ‡§ï‡§∞‡•á‡§Ç', '‡§π‡§æ‡§á‡§°‡•ç‡§∞‡•á‡§ü‡•á‡§° ‡§∞‡§π‡•á‡§Ç', '‡§ó‡§≤‡•á ‡§ï‡•Ä ‡§≤‡•ã‡§ú‡§º‡•á‡§Ç‡§ú‡•á‡§∏ ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡•á‡§Ç', '‡§Ö‡§™‡§®‡•Ä ‡§Ü‡§µ‡§æ‡§ú‡§º ‡§ï‡•ã ‡§Ü‡§∞‡§æ‡§Æ ‡§¶‡•á‡§Ç']
        },
        '‡§Æ‡§§‡§≤‡•Ä': {
            info: '‡§Æ‡§§‡§≤‡•Ä ‡§Æ‡•ã‡§∂‡§® ‡§∏‡§ø‡§ï‡§®‡•á‡§∏, ‡§´‡•Ç‡§° ‡§™‡•â‡§á‡§ú‡§®‡§ø‡§Ç‡§ó ‡§Ø‡§æ ‡§§‡§®‡§æ‡§µ ‡§∏‡§π‡§ø‡§§ ‡§µ‡§ø‡§≠‡§ø‡§®‡•ç‡§® ‡§ï‡§æ‡§∞‡§ï‡•ã‡§Ç ‡§∏‡•á ‡§π‡•ã ‡§∏‡§ï‡§§‡•Ä ‡§π‡•à‡•§',
            suggestions: ['‡§õ‡•ã‡§ü‡•á, ‡§π‡§≤‡•ç‡§ï‡•á ‡§≠‡•ã‡§ú‡§® ‡§ñ‡§æ‡§è‡§Ç', '‡§õ‡•ã‡§ü‡•á ‡§ò‡•Ç‡§Ç‡§ü ‡§Æ‡•á‡§Ç ‡§π‡§æ‡§á‡§°‡•ç‡§∞‡•á‡§ü‡•á‡§° ‡§∞‡§π‡•á‡§Ç', '‡§§‡§æ‡§ú‡§º‡•Ä ‡§π‡§µ‡§æ ‡§≤‡•á‡§Ç', '‡§Ü‡§∞‡§æ‡§Æ‡§¶‡§æ‡§Ø‡§ï ‡§∏‡•ç‡§•‡§ø‡§§‡§ø ‡§Æ‡•á‡§Ç ‡§Ü‡§∞‡§æ‡§Æ ‡§ï‡§∞‡•á‡§Ç']
        },
        '‡§ö‡§ï‡•ç‡§ï‡§∞ ‡§Ü‡§®‡§æ': {
            info: '‡§ö‡§ï‡•ç‡§ï‡§∞ ‡§®‡§ø‡§∞‡•ç‡§ú‡§≤‡•Ä‡§ï‡§∞‡§£, ‡§Ü‡§Ç‡§§‡§∞‡§ø‡§ï ‡§ï‡§æ‡§® ‡§ï‡•Ä ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ‡§ì‡§Ç ‡§Ø‡§æ ‡§Ö‡§ö‡§æ‡§®‡§ï ‡§∏‡•ç‡§•‡§ø‡§§‡§ø ‡§™‡§∞‡§ø‡§µ‡§∞‡•ç‡§§‡§® ‡§ï‡•á ‡§ï‡§æ‡§∞‡§£ ‡§π‡•ã ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç‡•§',
            suggestions: ['‡§§‡•Å‡§∞‡§Ç‡§§ ‡§¨‡•à‡§† ‡§ú‡§æ‡§è‡§Ç ‡§Ø‡§æ ‡§≤‡•á‡§ü ‡§ú‡§æ‡§è‡§Ç', '‡§π‡§æ‡§á‡§°‡•ç‡§∞‡•á‡§ü‡•á‡§° ‡§∞‡§π‡•á‡§Ç', '‡§∏‡•ç‡§•‡§ø‡§§‡§ø ‡§¨‡§¶‡§≤‡§§‡•á ‡§∏‡§Æ‡§Ø ‡§ß‡•Ä‡§∞‡•á-‡§ß‡•Ä‡§∞‡•á ‡§ö‡§≤‡•á‡§Ç', '‡§Ö‡§ö‡§æ‡§®‡§ï ‡§π‡§∞‡§ï‡§§‡•ã‡§Ç ‡§∏‡•á ‡§¨‡§ö‡•á‡§Ç']
        },
        '‡§•‡§ï‡§æ‡§®': {
            info: '‡§•‡§ï‡§æ‡§® ‡§®‡•Ä‡§Ç‡§¶ ‡§ï‡•Ä ‡§ï‡§Æ‡•Ä, ‡§§‡§®‡§æ‡§µ, ‡§ñ‡§∞‡§æ‡§¨ ‡§Ü‡§π‡§æ‡§∞ ‡§Ø‡§æ ‡§Ö‡§Ç‡§§‡§∞‡•ç‡§®‡§ø‡§π‡§ø‡§§ ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§∏‡•ç‡§•‡§ø‡§§‡§ø‡§Ø‡•ã‡§Ç ‡§ï‡•á ‡§ï‡§æ‡§∞‡§£ ‡§π‡•ã ‡§∏‡§ï‡§§‡•Ä ‡§π‡•à‡•§',
            suggestions: ['‡§™‡§∞‡•ç‡§Ø‡§æ‡§™‡•ç‡§§ ‡§®‡•Ä‡§Ç‡§¶ ‡§∏‡•Å‡§®‡§ø‡§∂‡•ç‡§ö‡§ø‡§§ ‡§ï‡§∞‡•á‡§Ç', '‡§®‡§ø‡§Ø‡§Æ‡§ø‡§§ ‡§®‡•Ä‡§Ç‡§¶ ‡§ï‡§æ ‡§∏‡§Æ‡§Ø ‡§¨‡§®‡§æ‡§è ‡§∞‡§ñ‡•á‡§Ç', '‡§∏‡§Ç‡§§‡•Å‡§≤‡§ø‡§§ ‡§≠‡•ã‡§ú‡§® ‡§ñ‡§æ‡§è‡§Ç', '‡§π‡§≤‡•ç‡§ï‡•á ‡§µ‡•ç‡§Ø‡§æ‡§Ø‡§æ‡§Æ ‡§™‡§∞ ‡§µ‡§ø‡§ö‡§æ‡§∞ ‡§ï‡§∞‡•á‡§Ç']
        },
        '‡§™‡•á‡§ü ‡§¶‡§∞‡•ç‡§¶': {
            info: '‡§™‡•á‡§ü ‡§¶‡§∞‡•ç‡§¶ ‡§ï‡•á ‡§ï‡§à ‡§ï‡§æ‡§∞‡§£ ‡§π‡•ã ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç ‡§ú‡§ø‡§®‡§Æ‡•á‡§Ç ‡§Ö‡§™‡§ö, ‡§ó‡•à‡§∏ ‡§Ø‡§æ ‡§Ö‡§ß‡§ø‡§ï ‡§ó‡§Ç‡§≠‡•Ä‡§∞ ‡§∏‡•ç‡§•‡§ø‡§§‡§ø‡§Ø‡§æ‡§Ç ‡§∂‡§æ‡§Æ‡§ø‡§≤ ‡§π‡•à‡§Ç‡•§',
            suggestions: ['‡§Æ‡§∏‡§æ‡§≤‡•á‡§¶‡§æ‡§∞ ‡§Ø‡§æ ‡§ö‡§ø‡§ï‡§®‡§æ ‡§≠‡•ã‡§ú‡§® ‡§∏‡•á ‡§¨‡§ö‡•á‡§Ç', '‡§π‡§≤‡•ç‡§ï‡•Ä ‡§ó‡§∞‡•ç‡§Æ‡•Ä ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡•á‡§Ç', '‡§π‡§æ‡§á‡§°‡•ç‡§∞‡•á‡§ü‡•á‡§° ‡§∞‡§π‡•á‡§Ç', '‡§õ‡•ã‡§ü‡•á, ‡§≤‡§ó‡§æ‡§§‡§æ‡§∞ ‡§≠‡•ã‡§ú‡§® ‡§ñ‡§æ‡§è‡§Ç']
        }
    }
    const offlineSymptomsEnglish = {
        'headache': {
            info: 'Headaches can be caused by stress, dehydration, eye strain, or lack of sleep. Try resting in a quiet, dark room and staying hydrated.',
            suggestions: ['Rest in a dark room', 'Stay hydrated', 'Apply cold compress', 'Consider over-the-counter pain relief']
        },
        'fever': {
            info: 'A fever is often a sign your body is fighting an infection. Monitor your temperature and stay hydrated.',
            suggestions: ['Rest and sleep', 'Drink plenty of fluids', 'Take temperature regularly', 'Seek medical attention if fever is high or persistent']
        },
        'cough': {
            info: 'Coughs can be dry or productive and may be caused by infections, allergies, or irritants.',
            suggestions: ['Stay hydrated', 'Use honey for soothing', 'Avoid irritants', 'Consider seeing a doctor if persistent']
        },
        'sore throat': {
            info: 'Sore throats are commonly caused by viral infections, bacterial infections, or irritation.',
            suggestions: ['Gargle with warm salt water', 'Stay hydrated', 'Use throat lozenges', 'Rest your voice']
        },
        'nausea': {
            info: 'Nausea can be caused by various factors including motion sickness, food poisoning, or stress.',
            suggestions: ['Eat small, bland meals', 'Stay hydrated with small sips', 'Get fresh air', 'Rest in a comfortable position']
        },
        'dizziness': {
            info: 'Dizziness can result from dehydration, inner ear issues, or sudden position changes.',
            suggestions: ['Sit or lie down immediately', 'Stay hydrated', 'Move slowly when changing positions', 'Avoid sudden movements']
        },
        'fatigue': {
            info: 'Fatigue can be caused by lack of sleep, stress, poor diet, or underlying health conditions.',
            suggestions: ['Ensure adequate sleep', 'Maintain regular sleep schedule', 'Eat balanced meals', 'Consider light exercise']
        },
        'stomach pain': {
            info: 'Stomach pain can have many causes including indigestion, gas, or more serious conditions.',
            suggestions: ['Avoid spicy or fatty foods', 'Try gentle heat application', 'Stay hydrated', 'Eat small, frequent meals']
        }
    }
    React.useEffect(() => {
        const handleOnlineStatus = () => setIsOnline(navigator.onLine)
        window.addEventListener('online', handleOnlineStatus)
        window.addEventListener('offline', handleOnlineStatus)
        if ('webkitSpeechRecognition' in window || 'SpeechRecognition' in window) {
            const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition
            recognitionRef.current = new SpeechRecognition()
            recognitionRef.current.continuous = false
            recognitionRef.current.interimResults = false
            recognitionRef.current.lang = 'hi-IN'
            recognitionRef.current.onstart = () => {
                setIsListening(true)
            }
            recognitionRef.current.onend = () => {
                setIsListening(false)
            }
            recognitionRef.current.onresult = (event) => {
                const transcript = event.results[0][0].transcript
                setInputValue(prev => prev + transcript)
            }
            recognitionRef.current.onerror = (event) => {
                console.error('Speech recognition error:', event.error)
                setIsListening(false)
            }
        }
        speechSynthesisRef.current = window.speechSynthesis
        return () => {
            window.removeEventListener('online', handleOnlineStatus)
            window.removeEventListener('offline', handleOnlineStatus)
            if (recognitionRef.current) {
                recognitionRef.current.stop()
            }
            if (speechSynthesisRef.current) {
                speechSynthesisRef.current.cancel()
            }
        }
    }, [])
    React.useEffect(() => {
        scrollToBottom()
    }, [messages])
    const scrollToBottom = () => {
        messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' })
    }
    const detectLanguage = (text) => {
        const hindiRegex = /[\u0900-\u097F]/
        return hindiRegex.test(text) ? 'hindi' : 'english'
    }
    const findSymptomMatch = (input, language) => {
        const lowercaseInput = input.toLowerCase()
        const symptomsData = language === 'hindi' ? offlineSymptomsHindi : offlineSymptomsEnglish
      
        for (const [symptom, data] of Object.entries(symptomsData)) {
            if (lowercaseInput.includes(symptom.toLowerCase()) ||
                lowercaseInput.includes(symptom.toLowerCase().replace(' ', ''))) {
                return { symptom, ...data, language }
            }
        }
        return null
    }
    const searchWikipedia = async (query, language = 'en') => {
        try {
            const wikiLang = language === 'hindi' ? 'hi' : 'en'
            const searchResponse = await fetch(
                `https://${wikiLang}.wikipedia.org/api/rest_v1/page/summary/${encodeURIComponent(query)}`
            )
            if (!searchResponse.ok) {
                throw new Error('Wikipedia search failed')
            }
            const data = await searchResponse.json()
            return {
                title: data.title,
                extract: data.extract,
                url: data.content_urls?.desktop?.page
            }
        } catch (error) {
            console.error('Wikipedia API error:', error)
            return null
        }
    }
    const speakText = (text, language = 'hindi') => {
        if (!speechSynthesisRef.current) {
            alert(translations[currentLanguage].ttsNotSupported);
            return
        }
        speechSynthesisRef.current.cancel()
        const utterance = new SpeechSynthesisUtterance(text)
        utterance.lang = language === 'hindi' ? 'hi-IN' : 'en-US'
        utterance.rate = 0.9
        utterance.pitch = 1.0
        utterance.volume = 1.0
        const voices = speechSynthesisRef.current.getVoices()
        const hindiVoice = voices.find(voice =>
            voice.lang === 'hi-IN' || voice.lang.startsWith('hi')
        )
        const englishVoice = voices.find(voice =>
            voice.lang === 'en-US' || voice.lang.startsWith('en')
        )
        if (language === 'hindi' && hindiVoice) {
            utterance.voice = hindiVoice
        } else if (englishVoice) {
            utterance.voice = englishVoice
        }
        utterance.onstart = () => {
            setIsSpeaking(true)
        }
        utterance.onend = () => {
            setIsSpeaking(false)
        }
        utterance.onerror = (event) => {
            console.error('Speech synthesis error:', event.error)
            setIsSpeaking(false)
            alert(translations[currentLanguage].audioError);
        }
        speechSynthesisRef.current.speak(utterance)
    }
    const stopSpeaking = () => {
        if (speechSynthesisRef.current) {
            speechSynthesisRef.current.cancel()
            setIsSpeaking(false)
        }
    }
    const generateBotResponse = async (userMessage) => {
        setIsTyping(true)
        try {
            const language = detectLanguage(userMessage)
            const symptomMatch = findSymptomMatch(userMessage, language)
            if (isOnline) {
                let wikiQuery
                if (language === 'hindi') {
                    wikiQuery = userMessage.toLowerCase().includes('‡§≤‡§ï‡•ç‡§∑‡§£')
                        ? userMessage.replace(/‡§≤‡§ï‡•ç‡§∑‡§£|‡§≤‡§ï‡•ç‡§∑‡§£‡•ã‡§Ç/gi, '').trim()
                        : `${userMessage} ‡§≤‡§ï‡•ç‡§∑‡§£`
                } else {
                    wikiQuery = userMessage.toLowerCase().includes('symptom')
                        ? userMessage.replace(/symptom|symptoms/gi, '').trim()
                        : `${userMessage} symptoms`
                }
                const wikiData = await searchWikipedia(wikiQuery, language)
                if (symptomMatch) {
                    let response = ''
                    if (language === 'hindi') {
                        if (symptomMatch.symptom === '‡§Ø‡•ã‡§ú‡§®‡§æ') {
                            response = `${symptomMatch.info}\n\n`
                        } else {
                            response = `‡§Ü‡§™‡§ï‡•á ‡§≤‡§ï‡•ç‡§∑‡§£‡•ã‡§Ç ‡§ï‡•á ‡§Ü‡§ß‡§æ‡§∞ ‡§™‡§∞, ‡§Æ‡•Å‡§ù‡•á ‡§Ø‡§π ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§Æ‡§ø‡§≤‡•Ä:\n\n${symptomMatch.info}\n\n`
                        }
                        response += `**‡§∏‡•Å‡§ù‡§æ‡§µ:**\n${symptomMatch.suggestions.map(s => `‚Ä¢ ${s}`).join('\n')}\n\n`
                    } else {
                        response = `Based on your symptoms, here's what I found:\n\n${symptomMatch.info}\n\n`
                        response += `**Suggestions:**\n${symptomMatch.suggestions.map(s => `‚Ä¢ ${s}`).join('\n')}\n\n`
                    }
                    if (wikiData && wikiData.extract) {
                        response += language === 'hindi'
                            ? `**‡§Ö‡§§‡§ø‡§∞‡§ø‡§ï‡•ç‡§§ ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä:**\n${wikiData.extract.substring(0, 300)}...\n\n`
                            : `**Additional Information:**\n${wikiData.extract.substring(0, 300)}...\n\n`
                        if (wikiData.url) {
                            response += language === 'hindi'
                                ? `[‡§µ‡§ø‡§ï‡§ø‡§™‡•Ä‡§°‡§ø‡§Ø‡§æ ‡§™‡§∞ ‡§î‡§∞ ‡§ú‡§æ‡§®‡•á‡§Ç](${wikiData.url})`
                                : `[Learn more on Wikipedia](${wikiData.url})`
                        }
                    }
                    return response
                } else if (wikiData && wikiData.extract) {
                    return language === 'hindi'
                        ? `‡§Æ‡•Å‡§ù‡•á "${wikiData.title}" ‡§ï‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç ‡§ï‡•Å‡§õ ‡§∏‡§æ‡§Æ‡§æ‡§®‡•ç‡§Ø ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§Æ‡§ø‡§≤‡•Ä:\n\n${wikiData.extract}\n\n**‡§Æ‡§π‡§§‡•ç‡§µ‡§™‡•Ç‡§∞‡•ç‡§£:** ‡§Ø‡§π ‡§∏‡§æ‡§Æ‡§æ‡§®‡•ç‡§Ø ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§π‡•à‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§â‡§ö‡§ø‡§§ ‡§®‡§ø‡§¶‡§æ‡§® ‡§î‡§∞ ‡§â‡§™‡§ö‡§æ‡§∞ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§¶‡•á‡§ñ‡§≠‡§æ‡§≤ ‡§™‡•á‡§∂‡•á‡§µ‡§∞ ‡§∏‡•á ‡§™‡§∞‡§æ‡§Æ‡§∞‡•ç‡§∂ ‡§≤‡•á‡§Ç.\n\n${wikiData.url ? `[‡§µ‡§ø‡§ï‡§ø‡§™‡•Ä‡§°‡§ø‡§Ø‡§æ ‡§™‡§∞ ‡§î‡§∞ ‡§ú‡§æ‡§®‡•á‡§Ç](${wikiData.url})` : ''}`
                        : `I found some general information about "${wikiData.title}":\n\n${wikiData.extract}\n\n**Important:** This is general information. Please consult a healthcare professional for proper diagnosis and treatment.\n\n${wikiData.url ? `[Learn more on Wikipedia](${wikiData.url})` : ''}`
                }
            }
            if (symptomMatch) {
                let response = ''
                if (language === 'hindi') {
                    if (symptomMatch.symptom === '‡§Ø‡•ã‡§ú‡§®‡§æ') {
                        response = `${symptomMatch.info}\n\n`
                    } else {
                        response = `‡§Ü‡§™‡§ï‡•á ‡§≤‡§ï‡•ç‡§∑‡§£‡•ã‡§Ç ‡§ï‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç ‡§Æ‡•á‡§∞‡•Ä ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä:\n\n${symptomMatch.info}\n\n`
                    }
                    response += `**‡§∏‡•Å‡§ù‡§æ‡§µ:**\n${symptomMatch.suggestions.map(s => `‚Ä¢ ${s}`).join('\n')}\n\n`
                    response += `**‡§®‡•ã‡§ü:** ‡§µ‡§∞‡•ç‡§§‡§Æ‡§æ‡§® ‡§Æ‡•á‡§Ç ‡§ë‡§´‡§≤‡§æ‡§á‡§® - ‡§∏‡•Ä‡§Æ‡§ø‡§§ ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§â‡§™‡§≤‡§¨‡•ç‡§ß ‡§π‡•à‡•§`
                } else {
                    response = `Here's what I know about your symptoms:\n\n${symptomMatch.info}\n\n`
                    response += `**Suggestions:**\n${symptomMatch.suggestions.map(s => `‚Ä¢ ${s}`).join('\n')}\n\n`
                    response += `**Note:** Currently offline - limited information available.`
                }
                return response
            }
            return language === 'hindi'
                ? `‡§Æ‡•à‡§Ç ‡§∏‡§Æ‡§ù‡§§‡§æ ‡§π‡•Ç‡§Ç ‡§ï‡§ø ‡§Ü‡§™‡§ï‡•ã ‡§ï‡•Å‡§õ ‡§≤‡§ï‡•ç‡§∑‡§£‡•ã‡§Ç ‡§ï‡§æ ‡§Ö‡§®‡•Å‡§≠‡§µ ‡§π‡•ã ‡§∞‡§π‡§æ ‡§π‡•à‡•§ ‡§ú‡§¨‡§ï‡§ø ‡§Æ‡•á‡§∞‡•á ‡§™‡§æ‡§∏ ‡§Ü‡§™‡§ï‡•á ‡§¶‡•ç‡§µ‡§æ‡§∞‡§æ ‡§µ‡§∞‡•ç‡§£‡§ø‡§§ ‡§ï‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç ‡§µ‡§ø‡§∂‡§ø‡§∑‡•ç‡§ü ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à, ‡§Ø‡§π‡§æ‡§Ç ‡§ï‡•Å‡§õ ‡§∏‡§æ‡§Æ‡§æ‡§®‡•ç‡§Ø ‡§∏‡§ø‡§´‡§æ‡§∞‡§ø‡§∂‡•á‡§Ç ‡§¶‡•Ä ‡§ó‡§à ‡§π‡•à‡§Ç:\n\n‚Ä¢ ‡§Ö‡§™‡§®‡•á ‡§≤‡§ï‡•ç‡§∑‡§£‡•ã‡§Ç ‡§™‡§∞ ‡§®‡§ú‡§º‡§∞ ‡§∞‡§ñ‡•á‡§Ç\n‚Ä¢ ‡§π‡§æ‡§á‡§°‡•ç‡§∞‡•á‡§ü‡•á‡§° ‡§∞‡§π‡•á‡§Ç\n‚Ä¢ ‡§™‡§∞‡•ç‡§Ø‡§æ‡§™‡•ç‡§§ ‡§Ü‡§∞‡§æ‡§Æ ‡§≤‡•á‡§Ç\n‚Ä¢ ‡§ú‡•ç‡§û‡§æ‡§§ ‡§ü‡•ç‡§∞‡§ø‡§ó‡§∞‡•ç‡§∏ ‡§∏‡•á ‡§¨‡§ö‡•á‡§Ç\n‚Ä¢ ‡§Ø‡§¶‡§ø ‡§≤‡§ï‡•ç‡§∑‡§£ ‡§¨‡§®‡•á ‡§∞‡§π‡§§‡•á ‡§π‡•à‡§Ç ‡§Ø‡§æ ‡§¨‡§ø‡§ó‡§°‡§º‡§§‡•á ‡§π‡•à‡§Ç ‡§§‡•ã ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§¶‡•á‡§ñ‡§≠‡§æ‡§≤ ‡§™‡•á‡§∂‡•á‡§µ‡§∞ ‡§∏‡•á ‡§™‡§∞‡§æ‡§Æ‡§∞‡•ç‡§∂ ‡§≤‡•á‡§Ç\n\n**‡§Æ‡§π‡§§‡•ç‡§µ‡§™‡•Ç‡§∞‡•ç‡§£:** ‡§Æ‡•à‡§Ç ‡§™‡•á‡§∂‡•á‡§µ‡§∞ ‡§ö‡§ø‡§ï‡§ø‡§§‡•ç‡§∏‡§æ ‡§∏‡§≤‡§æ‡§π ‡§ï‡§æ ‡§µ‡§ø‡§ï‡§≤‡•ç‡§™ ‡§®‡§π‡•Ä‡§Ç ‡§π‡•Ç‡§Ç‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§â‡§ö‡§ø‡§§ ‡§®‡§ø‡§¶‡§æ‡§® ‡§î‡§∞ ‡§â‡§™‡§ö‡§æ‡§∞ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§°‡•â‡§ï‡•ç‡§ü‡§∞ ‡§∏‡•á ‡§Æ‡§ø‡§≤‡•á‡§Ç‡•§`
                : `I understand you're experiencing some symptoms. While I don't have specific information about what you're describing, here are some general recommendations:\n\n‚Ä¢ Monitor your symptoms\n‚Ä¢ Stay hydrated\n‚Ä¢ Get adequate rest\n‚Ä¢ Avoid known triggers\n‚Ä¢ Consult a healthcare professional if symptoms persist or worsen\n\n**Important:** I'm not a substitute for professional medical advice. Please see a doctor for proper diagnosis and treatment.`
        } finally {
            setIsTyping(false)
        }
    }
    const toggleSpeechRecognition = () => {
        if (!recognitionRef.current) {
            alert(translations[currentLanguage].speechNotSupported);
            return
        }
        if (isListening) {
            recognitionRef.current.stop()
        } else {
            recognitionRef.current.start()
        }
    }
    const handleBotMessageSpeak = (messageContent, messageIndex) => {
        const language = detectLanguage(messageContent)
        const cleanText = messageContent
            .replace(/\*\*/g, '')
            .replace(/\[([^\]]+)\]\([^)]+\)/g, '$1')
            .replace(/\n/g, '. ')
            .replace(/‚Ä¢/g, '')
        if (isSpeaking) {
            stopSpeaking()
        } else {
            speakText(cleanText, language)
        }
    }
    const handleSendMessage = async () => {
        if (!inputValue.trim()) return
        const userMessage = {
            type: 'user',
            content: inputValue,
            timestamp: new Date()
        }
        setMessages(prev => [...prev, userMessage])
        setInputValue('')
        const botResponse = await generateBotResponse(inputValue)
        const botMessage = {
            type: 'bot',
            content: botResponse,
            timestamp: new Date()
        }
        setMessages(prev => [...prev, botMessage])
    }
    const handleKeyPress = (e) => {
        if (e.key === 'Enter' && !e.shiftKey) {
            e.preventDefault()
            handleSendMessage()
        }
    }
    const formatMessage = (content) => {
        return content.split('\n').map((line, index) => {
            if (line.startsWith('**') && line.endsWith('**')) {
                return <div key={index} className="message-heading">{line.replace(/\*\*/g, '')}</div>
            }
            if (line.startsWith('‚Ä¢ ')) {
                return <div key={index} className="message-bullet">{line}</div>
            }
            if (line.includes('[') && line.includes('](')) {
                const linkMatch = line.match(/\[([^\]]+)\]\(([^)]+)\)/)
                if (linkMatch) {
                    return (
                        <div key={index}>
                            <a href={linkMatch[2]} target="_blank" rel="noopener noreferrer" className="message-link">
                                {linkMatch[1]}
                            </a>
                        </div>
                    )
                }
            }
            return line ? <div key={index}>{line}</div> : <br key={index} />
        })
    }
    return (
        <div className="chatbot-container">
            {isOpen && (
                <div className="chat-window">
                    <div className="chat-header">
                        <div className="header-content">
                            <div className="bot-avatar">üè•</div>
                            <div className="header-text">
                                <h3>{translations[currentLanguage].chatHeader}</h3>
                                <span className={`status ${isOnline ? 'online' : 'offline'}`}>
                                    {isOnline ? translations[currentLanguage].statusOnline : translations[currentLanguage].statusOffline}
                                </span>
                            </div>
                        </div>
                        <button
                            className="close-btn"
                            onClick={onClose}
                        >
                            ‚úï
                        </button>
                    </div>
                    <div className="chat-messages">
                        {messages.map((message, index) => (
                            <div key={index} className={`message ${message.type}`}>
                                <div className="message-content">
                                    {formatMessage(message.content, index)}
                                    {message.type === 'bot' && (
                                        <button
                                            className={`speaker-btn ${isSpeaking ? 'speaking' : ''}`}
                                            onClick={() => handleBotMessageSpeak(message.content, index)}
                                            title={isSpeaking ? translations[currentLanguage].speakerStop : translations[currentLanguage].speakerPlay}
                                        >
                                            {isSpeaking ? '‚èπÔ∏è' : 'üîä'}
                                        </button>
                                    )}
                                </div>
                                <div className="message-time">
                                    {message.timestamp.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}
                                </div>
                            </div>
                        ))}
                        {isTyping && (
                            <div className="message bot typing">
                                <div className="typing-indicator">
                                    <span></span>
                                    <span></span>
                                    <span></span>
                                </div>
                            </div>
                        )}
                        <div ref={messagesEndRef} />
                    </div>
                    <div className="chat-input">
                        <div className="input-container">
                            <textarea
                                className='message-input'
                                value={inputValue}
                                onChange={(e) => setInputValue(e.target.value)}
                                onKeyPress={handleKeyPress}
                                placeholder={translations[currentLanguage].chatPlaceholder}
                                rows="1"
                            />
                            <button
                                onClick={toggleSpeechRecognition}
                                className={`mic-btn ${isListening ? 'listening' : ''}`}
                                type="button"
                                title={translations[currentLanguage].micTitle}
                            >
                                üé§
                            </button>
                            <button
                                onClick={handleSendMessage}
                                disabled={!inputValue.trim()}
                                className="send-btn"
                            >
                                {translations[currentLanguage].sendIcon}
                            </button>
                        </div>
                        <div className="disclaimer">
                            {translations[currentLanguage].disclaimer}
                        </div>
                    </div>
                </div>
            )}
        </div>
    )
}
const handleRegisterPatient = () => {
    window.open('https://registration-flame-psi.vercel.app/', '_blank');
};
const handleUpdateHealthRecord = () => {
    window.open('https://asha-voice-form.vercel.app/', '_blank');
};
const AshaConnectApp = () => {
    const { t, i18n } = useTranslation();
    const [user, setUser] = useState(null);
    const [isLoggedIn, setIsLoggedIn] = useState(false);
    const [activeTab, setActiveTab] = useState('dashboard');
    const [mobileMenuOpen, setMobileMenuOpen] = useState(false);
    const [searchTerm, setSearchTerm] = useState('');
    const [activePatient, setActivePatient] = useState(null);
    const [showChatbot, setShowChatbot] = useState(false);
    const [currentLanguage, setCurrentLanguage] = useState('en');
  
    const switchLanguage = (lang) => {
   setCurrentLanguage(lang);
     };
  
    const [patients] = useState([
        {
            id: 1,
            uniqueId: 'PAT001',
            name: 'Priya Sharma',
            age: 28,
            gender: 'Female',
            lastVisit: '2025-09-15',
            status: 'Pregnant',
            phone: '+91 9876543210',
            address: 'House No. 123, Rajaji Nagar, Bangalore',
            conditions: ['Pregnancy', 'Anemia'],
            nextVisit: '2025-10-05',
            priority: 'high',
            healthRecords: [
                { date: '2025-09-15', bp: '110/70', sugar: '120', weight: '58kg', notes: 'Regular checkup, advised iron supplements' }
            ]
        },
        {
            id: 2,
            uniqueId: 'PAT002',
            name: 'Ramesh Kumar',
            age: 65,
            gender: 'Male',
            lastVisit: '2025-09-18',
            status: 'Diabetes',
            phone: '+91 8765432109',
            address: 'No. 45, Gandhi Road, Chennai',
            conditions: ['Diabetes', 'Hypertension'],
            nextVisit: '2025-10-10',
            priority: 'medium',
            healthRecords: [
                { date: '2025-09-18', bp: '140/90', sugar: '180', weight: '72kg', notes: 'Blood sugar high, advised diet control' }
            ]
        },
    ]);
    const [healthMetrics] = useState({
        totalPatients: 45,
        activeCases: 12,
        completedVisits: 28,
        pendingTasks: 8
    });
    const [medicineStock] = useState([
        { id: 1, name: 'Paracetamol', dosage: '500mg', stock: 1500, required: 2000, status: 'low' },
        { id: 2, name: 'Metformin', dosage: '500mg', stock: 800, required: 1000, status: 'medium' },
        { id: 3, name: 'Iron Tablets', dosage: '100mg', stock: 1200, required: 1500, status: 'medium' },
        { id: 4, name: 'Amoxicillin', dosage: '250mg', stock: 3000, required: 2500, status: 'good' },
        { id: 5, name: 'Vitamin B Complex', dosage: '100mg', stock: 500, required: 1000, status: 'low' }
    ]);
    const [healthLibraryTopics] = useState([
        { id: 1, title: 'Pregnancy Care', content: 'Complete guide for expecting mothers...', category: 'Maternal Health' },
        { id: 2, title: 'Diabetes Management', content: 'Managing blood sugar levels...', category: 'Chronic Care' },
        { id: 3, title: 'Child Nutrition', content: 'Nutrition guide for children...', category: 'Pediatric Care' },
    ]);
    const [notifications] = useState([
        { id: 1, message: 'Medicine stock low for Paracetamol', time: '10 min ago', read: false, type: 'stock' },
        { id: 2, message: 'Health record updated for Ramesh Kumar', time: '1 hour ago', read: true, type: 'update' },
    ]);
    const handleLogin = (credentials) => {
        const mockUser = {
            id: 1,
            name: 'Anita Desai',
            email: 'anita.desai@asha.org',
            phone: '+91 9876543210',
            location: 'Bangalore, Karnataka',
            patientsCount: patients.length,
            rating: 4.9,
            joinedDate: '2022-03-15',
            designation: 'Senior ASHA Worker',
            ashaId: credentials.ashaId
        };
        setUser(mockUser);
        setIsLoggedIn(true);
    };
    useEffect(() => {
        const savedUser = localStorage.getItem('ashaUser');
        if (savedUser) {
            setUser(JSON.parse(savedUser));
            setIsLoggedIn(true);
        }
    }, []);
    useEffect(() => {
        if (user) {
            localStorage.setItem('ashaUser', JSON.stringify(user));
        }
    }, [user]);
    const handleLogout = () => {
        setUser(null);
        setIsLoggedIn(false);
        localStorage.removeItem('ashaUser');
        setActiveTab('dashboard');
    };
    const DashboardTab = () => (
        <div className="tab-content">
            <section className="welcome-section">
                <div className="welcome-content">
                    <div className="welcome-text">
                          <h2>{translations[currentLanguage].welcome.replace('{name}', user?.name)}</h2>
  <p>{translations[currentLanguage].dedication}</p>
  <div className="asha-info">
    <span>ASHA ID: {user?.ashaId}</span>
    <span>Location: {user?.location}</span>
  </div>
                    </div>
                    <div className="welcome-actions">
                        <button className="btn-primary" onClick={handleRegisterPatient}>
                            <UserPlus size={16} />
                            {translations[currentLanguage].registerNewPatient}
                        </button>
                        <button className="btn-primary" onClick={() => setActiveTab('family-id')}>
                            <FolderPlus size={16} />
                            {translations[currentLanguage].generateFamilyId}
                        </button>
                        <button className="btn-primary" onClick={handleHealthRecord}>
                            <UsersIcon size={16} />
                            {translations[currentLanguage].updateHealthRecords}
                        </button>
                    </div>
                </div>
          
                <div className="stats-grid">
                    <div className="stat-card">
                        <div className="stat-icon-wrapper teal">
                            <Users className="stat-icon" />
                        </div>
                        <div className="stat-content">
                              <h3>{healthMetrics.totalPatients}</h3>
  <p>{translations[currentLanguage].totalPatients}</p>
                            <span className="stat-trend positive">
                                <TrendingUp size={14} />
                                +5% this month
                            </span>
                        </div>
                    </div>
              
                    <div className="stat-card">
                        <div className="stat-icon-wrapper aqua">
                            <Activity className="stat-icon" />
                        </div>
                        <div className="stat-content">
                           <h3>{healthMetrics.activeCases}</h3>
  <p>{translations[currentLanguage].activeCases}</p>
                            <span className="stat-trend positive">
                                <TrendingUp size={14} />
                                +2 today
                            </span>
                        </div>
                    </div>
              
                    <div className="stat-card">
                        <div className="stat-icon-wrapper mint">
                            <ClipboardList className="stat-icon" />
                        </div>
                        <div className="stat-content">
                            <h3>{healthMetrics.completedVisits}</h3>
  <p>{translations[currentLanguage].completedVisits}</p>
                            <span className="stat-trend positive">
                                <TrendingUp size={14} />
                                98% success rate
                            </span>
                        </div>
                    </div>
              
                    <div className="stat-card">
                        <div className="stat-icon-wrapper cyan">
                            <Clock className="stat-icon" />
                        </div>
                        <div className="stat-content">
                            <h3>{healthMetrics.pendingTasks}</h3>
  <p>{translations[currentLanguage].pendingTasks}</p>
                            <span className="stat-trend">
                                Due today: 3
                            </span>
                        </div>
                    </div>
                </div>
            </section>
            <section className="section">
                <div className="section-header">
                    <h3 className="section-title">{translations[currentLanguage].quickActions}</h3>
                </div>
                <div className="quick-actions-grid">
                    <button className="action-card" onClick={handleRegisterPatient}>
                        <div className="action-icon-wrapper teal">
                            <UserPlus className="action-icon" />
                        </div>
                        <span>{translations[currentLanguage].registerPatient}</span>
                        <p>{translations[currentLanguage].registerPatientSub}</p>
                    </button>
              
                    <button className="action-card" onClick={() => setShowChatbot(true)}>
                        <div className="action-icon-wrapper aqua">
                            <Stethoscope className="action-icon" />
                        </div>
                        <span>{translations[currentLanguage].symptomCheck}</span>
                        <p>{translations[currentLanguage].symptomCheckSub}</p>
                    </button>
              
                    <button className="action-card" onClick={() => setActiveTab('medicine')}>
                        <div className="action-icon-wrapper red">
                            <Pill className="action-icon" />
                        </div>
                        <span>{translations[currentLanguage].medicineStock}</span>
                        <p>{translations[currentLanguage].medicineStockSub}</p>
                    </button>
                    <button className="action-card" onClick={handleHealthRecord}>
                        <div className="action-icon-wrapper mint">
                            <FileText className="action-icon" />
                        </div>
                        <span>{translations[currentLanguage].updateHealthRecord}</span>
                        <p>{translations[currentLanguage].updateHealthRecordSub}</p>
                    </button>
              
                    <button className="action-card" onClick={() => setActiveTab('family-id')}>
                        <div className="action-icon-wrapper purple">
                            <FolderPlus className="action-icon" />
                        </div>
                        <span>{translations[currentLanguage].generateFamilyId}</span>
                        <p>{translations[currentLanguage].generateFamilyIdSub}</p>
                    </button>
              
                    <button className="action-card" onClick={() => setActiveTab('library')}>
                        <div className="action-icon-wrapper blue">
                            <BookOpen className="action-icon" />
                        </div>
                        <span>{translations[currentLanguage].healthLibrary}</span>
                        <p>{translations[currentLanguage].healthLibrarySub}</p>
                    </button>
                </div>
            </section>
        </div>
    );
    const MedicineTrackerTab = () => (
        <div className="tab-content">
            <div className="tab-header">
                <h2>{translations[currentLanguage].phcTitle}</h2>
                <p>{translations[currentLanguage].phcSubtitle}</p>
            </div>
          
            <section className="section">
                <div className="search-filter-bar">
                    <div className="search-box">
                        <Search size={18} />
                        <input
                            type="text"
                            placeholder={translations[currentLanguage].searchMedicines}
                            className="search-input"
                        />
                    </div>
                    <div
  className="filter-buttons"
  style={{
    display: "flex",
    justifyContent: "space-between", // equal distribution
    gap: "12px", // equal gap
    padding: "16px",
  }}
>
  <button
    className="filter-btn active"
    style={{
      flex: 1, // makes all buttons same width
      padding: "10px 16px",
    }}
  >
    {translations[currentLanguage].filterAll}
  </button>
  <button
    className="filter-btn"
    style={{
      flex: 1,
      padding: "10px 16px",
    }}
  >
    {translations[currentLanguage].filterLow}
  </button>
  <button
    className="filter-btn"
    style={{
      flex: 1,
      padding: "10px 16px",
    }}
  >
    {translations[currentLanguage].filterAdequate}
  </button>
</div>
                </div>
                 <div
      style={{
        display: "flex",
        flexDirection: "column",
        gap: "16px",
        width: "100%",
      }}
    >
      {medicineStock.map((medicine) => (
        <div
          key={medicine.id}
          style={{
            display: "flex",
            flexDirection: "column",
            padding: "20px",
            border: "1px solid #e0e7ff",
            borderRadius: "12px",
            background: "white",
            boxShadow: "0 2px 8px rgba(0,0,0,0.05)",
            transition: "0.3s ease",
          }}
        >
          {/* Header Section */}
          <div
            style={{
              display: "flex",
              justifyContent: "space-between",
              alignItems: "flex-start",
              marginBottom: "12px",
            }}
          >
            <div style={{ flex: 1 }}>
              <h3
                style={{
                  margin: 0,
                  fontSize: "18px",
                  fontWeight: "600",
                  color: "#1e3a8a", // deep blue
                }}
              >
                {medicine.name}
              </h3>
              <p
                style={{
                  margin: "4px 0",
                  fontSize: "14px",
                  color: "#475569",
                }}
              >
                {medicine.dosage}
              </p>
              <div style={{ fontSize: "13px", color: "#334155" }}>
                <span style={{ marginRight: "12px" }}>
                  <strong>Stock:</strong> {medicine.stock}
                </span>
                <span>
                  <strong>Required:</strong> {medicine.required}
                </span>
              </div>
            </div>
            <div
              style={{
                padding: "6px 12px",
                borderRadius: "20px",
                fontSize: "13px",
                fontWeight: "600",
                background:
                  medicine.status === "good"
                    ? "#d1fae5"
                    : medicine.status === "medium"
                    ? "#fef9c3"
                    : "#fee2e2",
                color:
                  medicine.status === "good"
                    ? "#065f46"
                    : medicine.status === "medium"
                    ? "#92400e"
                    : "#991b1b",
              }}
            >
              {medicine.status === "good"
                ? translations[currentLanguage].statusGood
                : medicine.status === "medium"
                ? translations[currentLanguage].statusMedium
                : translations[currentLanguage].statusLow}
            </div>
          </div>
          {/* Progress Bar */}
          <div style={{ marginBottom: "14px" }}>
            <div
              style={{
                width: "100%",
                height: "10px",
                background: "#e0e7ff",
                borderRadius: "8px",
                overflow: "hidden",
              }}
            >
              <div
                style={{
                  width: `${Math.min(
                    (medicine.stock / medicine.required) * 100,
                    100
                  )}%`,
                  height: "100%",
                  background:
                    medicine.status === "good"
                      ? "#2563eb"
                      : medicine.status === "medium"
                      ? "#facc15"
                      : "#ef4444",
                  transition: "0.4s ease",
                }}
              ></div>
            </div>
            <div
              style={{
                display: "flex",
                justifyContent: "space-between",
                fontSize: "12px",
                marginTop: "4px",
                color: "#475569",
              }}
            >
              <span>0</span>
              <span>{medicine.required}</span>
            </div>
          </div>
          {/* Actions */}
          <div style={{ display: "flex", gap: "12px" }}>
            <button
              style={{
                flex: 1,
                display: "flex",
                alignItems: "center",
                justifyContent: "center",
                gap: "6px",
                padding: "8px 12px",
                border: "1px solid #2563eb",
                borderRadius: "8px",
                background: "white",
                color: "#2563eb",
                cursor: "pointer",
                fontSize: "14px",
                fontWeight: "500",
                transition: "0.3s ease",
              }}
              onMouseOver={(e) =>
                (e.currentTarget.style.background = "#f0f9ff")
              }
              onMouseOut={(e) =>
                (e.currentTarget.style.background = "white")
              }
            >
              <FileDown size={16} /> {translations[currentLanguage].requestMore}
            </button>
            <button
              style={{
                flex: 1,
                display: "flex",
                alignItems: "center",
                justifyContent: "center",
                gap: "6px",
                padding: "8px 12px",
                border: "1px solid #2563eb",
                borderRadius: "8px",
                background: "white",
                color: "#2563eb",
                cursor: "pointer",
                fontSize: "14px",
                fontWeight: "500",
                transition: "0.3s ease",
              }}
              onMouseOver={(e) =>
                (e.currentTarget.style.background = "#f0f9ff")
              }
              onMouseOut={(e) =>
                (e.currentTarget.style.background = "white")
              }
            >
              <Share2 size={16} /> {translations[currentLanguage].reportIssue}
            </button>
          </div>
        </div>
      ))}
    </div>
            </section>
        </div>
    );
    const HealthLibraryTab = () => (
      
        <div className="tab-content">
            <div className="tab-header">
                <h2>{translations[currentLanguage].libraryTitle}</h2>
                <p>{translations[currentLanguage].librarySubtitle}</p>
            </div>
            <section className="section">
                <div className="featured-video-section">
                    <h3>Official PHC Video</h3>
                    <div className="video-frame">
                        <iframe
                            width="100%"
                            height="315"
                            src='https://www.youtube.com/embed/W3jSiFJpcm0'

                            title="PHC Health Video"
                            frameBorder="0"
                            allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
                            allowFullScreen
                        ></iframe>
                    </div>
                    <p>Latest video from authorities on health guidelines.</p>
                </div>
                <div className="library-filters">
                    <button className="filter-btn active">{translations[currentLanguage].filterAllTopics}</button>
                    <button className="filter-btn">{translations[currentLanguage].filterMaternal}</button>
                    <button className="filter-btn">{translations[currentLanguage].filterChild}</button>
                    <button className="filter-btn">{translations[currentLanguage].filterChronic}</button>
                </div>
                <div className="library-grid">
                    {healthLibraryTopics.map(topic => (
                        <div key={topic.id} className="library-card">
                            <div className="library-card-header">
                                <div className="topic-category">{topic.category}</div>
                                <Book size={20} className="topic-icon" />
                            </div>
                            <h3>{topic.title}</h3>
                            <p>{topic.content}</p>
                            <button className="btn-primary">{translations[currentLanguage].readMore}</button>
                        </div>
                    ))}
                </div>
            </section>
        </div>
    );
   const Schedule = () => {
    const [activeFilter, setActiveFilter] = useState('today');
    const [selectedDrive, setSelectedDrive] = useState(null);
    const [showDetailsModal, setShowDetailsModal] = useState(false);
    
    // Vaccination drives by ward/area
    const vaccinationDrives = [
        {
            id: 1,
            type: 'routine_immunization',
            ward_number: 'Ward 12',
            area: 'Sector 5, Urban Area',
            location: 'Anganwadi Center, Block C',
            target_population: 245,
            coverage_goal: '95%',
            time: '09:00 AM - 02:00 PM',
            date: '2024-01-15',
            duration: '5 hours',
            priority: 'high',
            status: 'pending',
            vaccines: ['BCG', 'OPV', 'DPT', 'Hepatitis B', 'Measles'],
            target_age_group: '0-5 years',
            households_covered: 45,
            children_registered: 67,
            tasks: [
                'Cold chain maintenance',
                'Vaccine administration',
                'Registration of beneficiaries',
                'AEFI monitoring',
                'Documentation and reporting'
            ],
            supplies_required: [
                'Vaccine carriers',
                'Ice packs',
                'Syringes (0.5ml & 2ml)',
                'AD syringes',
                'Diluents',
                'Cotton & Spirit',
                'MMR kits',
                'Reporting forms'
            ],
            health_worker_assigned: 'ASHA Sunita',
            supervisor: 'ANM Rajeshwari',
            special_instructions: 'Focus on left-out and drop-out children. Check migration families.'
        },
        {
            id: 2,
            type: 'special_campaign',
            ward_number: 'Ward 8',
            area: 'Sector 3, Rural Cluster',
            location: 'Primary School Building',
            target_population: 180,
            coverage_goal: '100%',
            time: '10:00 AM - 04:00 PM',
            date: '2024-01-16',
            duration: '6 hours',
            priority: 'medium',
            status: 'pending',
            vaccines: ['MR Vaccine', 'Vitamin A'],
            target_age_group: '9 months - 15 years',
            households_covered: 32,
            children_registered: 89,
            tasks: [
                'Community mobilization',
                'Line listing of children',
                'Vaccine administration',
                'Vitamin A supplementation',
                'Adverse event monitoring'
            ],
            supplies_required: [
                'MR vaccine vials',
                'Vitamin A capsules',
                'Syringes & needles',
                'Antiseptic solution',
                'AEFI kit',
                'Muster rolls'
            ],
            health_worker_assigned: 'ASHA Priya',
            supervisor: 'MO Dr. Verma',
            special_instructions: 'Coordinate with school teachers. Ensure session microplan is followed.'
        },
        {
            id: 3,
            type: 'outreach_session',
            ward_number: 'Ward 15',
            area: 'Tribal Hamlet',
            location: 'Sub-Center Building',
            target_population: 95,
            coverage_goal: '90%',
            time: '08:00 AM - 01:00 PM',
            date: '2024-01-17',
            duration: '5 hours',
            priority: 'high',
            status: 'upcoming',
            vaccines: ['All Routine Vaccines'],
            target_age_group: '0-5 years & Pregnant Women',
            households_covered: 28,
            children_registered: 42,
            tasks: [
                'Pre-session preparation',
                'Vaccine transportation',
                'Beneficiary registration',
                'Immunization services',
                'Record updating'
            ],
            supplies_required: [
                'Vaccine carrier with ice packs',
                'Immunization register',
                'Mother-child protection cards',
                'Weighing scale',
                'Health education materials'
            ],
            health_worker_assigned: 'ASHA Laxmi',
            supervisor: 'ANM Geeta',
            special_instructions: 'Focus on hard-to-reach areas. Track defaulters.'
        }
    ];

    const getDrivesByFilter = () => {
        const today = '2024-01-15';
        switch (activeFilter) {
            case 'today':
                return vaccinationDrives.filter(drive => drive.date === today);
            case 'upcoming':
                return vaccinationDrives.filter(drive => drive.status === 'upcoming' || drive.date > today);
            case 'completed':
                return vaccinationDrives.filter(drive => drive.status === 'completed');
            default:
                return vaccinationDrives;
        }
    };

    const getPriorityStyles = (priority) => {
        const styles = {
            high: { background: '#fef2f2', color: '#dc2626', borderColor: '#fecaca' },
            medium: { background: '#fffbeb', color: '#d97706', borderColor: '#fed7aa' },
            low: { background: '#f0fdf4', color: '#16a34a', borderColor: '#bbf7d0' }
        };
        return styles[priority] || styles.medium;
    };

    const getTypeIcon = (type) => {
        const icons = {
            routine_immunization: Shield,
            special_campaign: Users,
            outreach_session: MapPin,
            catch_up: Target
        };
        const IconComponent = icons[type] || Shield;
        return <IconComponent size={16} />;
    };

    const getTypeLabel = (type) => {
        const labels = {
            routine_immunization: 'Routine Immunization',
            special_campaign: 'Special Campaign',
            outreach_session: 'Outreach Session',
            catch_up: 'Catch-up Drive'
        };
        return labels[type] || 'Vaccination Drive';
    };

    const handleMarkComplete = (driveId) => {
        // API call to mark drive as completed
        console.log('Marking drive as complete:', driveId);
    };

    const totalChildrenCovered = vaccinationDrives.reduce((sum, drive) => 
        sum + (drive.children_registered || 0), 0
    );

    const totalHouseholds = vaccinationDrives.reduce((sum, drive) => 
        sum + (drive.households_covered || 0), 0
    );

    return (
        <div className="tab-content">
            <div className="tab-header">
                <h2>Vaccination Drive Schedule</h2>
                <p>ASHA Worker Immunization Sessions by Ward</p>
            </div>

            <section className="section">
                <div className="schedule-header">
                    <div className="schedule-filters">
                        {[
                            { key: 'today', label: "Today's Drives" },
                            { key: 'upcoming', label: 'Upcoming Sessions' },
                            { key: 'completed', label: 'Completed' }
                        ].map(filter => (
                            <button
                                key={filter.key}
                                onClick={() => setActiveFilter(filter.key)}
                                className={`filter-btn ${activeFilter === filter.key ? 'active' : ''}`}
                            >
                                {filter.label}
                            </button>
                        ))}
                    </div>
                </div>

                <div className="schedule-list">
                    {getDrivesByFilter().map(drive => (
                        <div key={drive.id} className="schedule-card">
                            <div className="schedule-card-header">
                                <div className="task-type">
                                    <div className="type-badge" style={getPriorityStyles(drive.priority)}>
                                        {getTypeIcon(drive.type)}
                                        {getTypeLabel(drive.type)}
                                    </div>
                                    <div className="ward-badge">
                                        {drive.ward_number}
                                    </div>
                                </div>
                                <div className="task-time">
                                    <Clock size={14} />
                                    {drive.time} ‚Ä¢ {drive.duration}
                                </div>
                            </div>

                            <div className="task-details">
                                <h4>{drive.area}</h4>
                                <div className="task-location">
                                    <MapPin size={14} />
                                    <span>{drive.location}</span>
                                </div>
                                <div className="drive-stats">
                                    <div className="stat-item">
                                        <Users size={14} />
                                        <span>Target: {drive.target_population} children</span>
                                    </div>
                                    <div className="stat-item">
                                        <Target size={14} />
                                        <span>Goal: {drive.coverage_goal} coverage</span>
                                    </div>
                                </div>
                            </div>

                            <div className="vaccine-list">
                                <p><strong>Vaccines:</strong></p>
                                <div className="tasks-container">
                                    {drive.vaccines.map((vaccine, index) => (
                                        <span key={index} className="vaccine-tag">
                                            {vaccine}
                                        </span>
                                    ))}
                                </div>
                            </div>

                            <div className="task-list">
                                <p><strong>ASHA Tasks:</strong></p>
                                <div className="tasks-container">
                                    {drive.tasks.map((task, index) => (
                                        <span key={index} className="task-tag">
                                            {task}
                                        </span>
                                    ))}
                                </div>
                            </div>

                            <div className="drive-meta">
                                <div className="meta-item">
                                    <span>Health Worker:</span>
                                    <strong>{drive.health_worker_assigned}</strong>
                                </div>
                                <div className="meta-item">
                                    <span>Supervisor:</span>
                                    <strong>{drive.supervisor}</strong>
                                </div>
                            </div>

                            {drive.status !== 'completed' && (
                                <div className="task-actions">
                                    <button 
                                        className="btn-primary"
                                        onClick={() => handleMarkComplete(drive.id)}
                                    >
                                        <CheckCircle size={14} />
                                        Mark Session Complete
                                    </button>
                                    <button 
                                        className="btn-outline"
                                        onClick={() => {
                                            setSelectedDrive(drive);
                                            setShowDetailsModal(true);
                                        }}
                                    >
                                        <Info size={14} />
                                        View Details
                                    </button>
                                </div>
                            )}
                        </div>
                    ))}
                </div>

                {getDrivesByFilter().length === 0 && (
                    <div className="empty-state">
                        <Calendar size={48} />
                        <h3>No Vaccination Drives Scheduled</h3>
                        <p>There are no immunization sessions scheduled for the selected period.</p>
                    </div>
                )}
            </section>

            <div className="stats-grid">
                <div className="stat-card">
                    <div className="stat-content">
                        <h3>{getDrivesByFilter().length}</h3>
                        <p>Scheduled Drives</p>
                    </div>
                    <Users className="stat-icon" />
                </div>
                <div className="stat-card">
                    <div className="stat-content">
                        <h3>{totalChildrenCovered}</h3>
                        <p>Children Registered</p>
                    </div>
                    <Target className="stat-icon" />
                </div>
                <div className="stat-card">
                    <div className="stat-content">
                        <h3>{totalHouseholds}</h3>
                        <p>Households Covered</p>
                    </div>
                    <Home className="stat-icon" />
                </div>
                <div className="stat-card">
                    <div className="stat-content">
                        <h3>
                            {vaccinationDrives.filter(d => d.priority === 'high').length}
                        </h3>
                        <p>High Priority Wards</p>
                    </div>
                    <AlertCircle className="stat-icon" />
                </div>
            </div>

            {/* Drive Details Modal */}
            {showDetailsModal && selectedDrive && (
                <DriveDetailsModal 
                    drive={selectedDrive}
                    onClose={() => setShowDetailsModal(false)}
                    onComplete={handleMarkComplete}
                />
            )}
        </div>
    );
};

// Additional modal component for drive details
const DriveDetailsModal = ({ drive, onClose, onComplete }) => {
    return (
        <div className="modal-overlay">
            <div className="modal-content">
                <div className="modal-header">
                    <h3>Vaccination Drive Details - {drive.ward_number}</h3>
                    <button onClick={onClose} className="close-btn">√ó</button>
                </div>
                
                <div className="modal-body">
                    <div className="drive-sections">
                        <div className="section">
                            <h4>Session Information</h4>
                            <div className="info-grid">
                                <div className="info-item">
                                    <span>Location:</span>
                                    <strong>{drive.location}, {drive.area}</strong>
                                </div>
                                <div className="info-item">
                                    <span>Date & Time:</span>
                                    <strong>{drive.date} ‚Ä¢ {drive.time}</strong>
                                </div>
                                <div className="info-item">
                                    <span>Target Population:</span>
                                    <strong>{drive.target_population} children ({drive.target_age_group})</strong>
                                </div>
                            </div>
                        </div>

                        <div className="section">
                            <h4>Vaccines & Supplies</h4>
                            <div className="supplies-list">
                                {drive.supplies_required.map((supply, index) => (
                                    <div key={index} className="supply-item">
                                        <CheckCircle size={14} />
                                        {supply}
                                    </div>
                                ))}
                            </div>
                        </div>

                        <div className="section">
                            <h4>Special Instructions</h4>
                            <p className="instructions">{drive.special_instructions}</p>
                        </div>
                    </div>
                </div>

                <div className="modal-actions">
                    <button className="btn-primary" onClick={() => onComplete(drive.id)}>
                        <CheckCircle size={16} />
                        Mark Session Complete
                    </button>
                    <button className="btn-outline" onClick={onClose}>
                        Close
                    </button>
                </div>
            </div>
        </div>
    );
};
    const NotificationsTab = () => (
        <div className="tab-content">
            <div className="tab-header">
                <h2>{translations[currentLanguage].notifTitle}</h2>
                <p>{translations[currentLanguage].notifSubtitle}</p>
            </div>
            <section className="section">
                <div className="notifications-list">
                    {notifications.map(notification => (
                        <div key={notification.id} className={`notification-item ${notification.read ? 'read' : 'unread'}`}>
                            <div className="notification-icon">
                                <Bell size={20} />
                            </div>
                            <div className="notification-content">
                                <p>{notification.message}</p>
                                <span className="notification-time">{notification.time}</span>
                            </div>
                            {!notification.read && <div className="unread-indicator"></div>}
                        </div>
                    ))}
                </div>
            </section>
        </div>
    );
    const renderTabContent = () => {
        switch(activeTab) {
            case 'dashboard': return <DashboardTab />;
            case 'patients': return <PaitentApp/>;
            case 'medicine': return <MedicineTrackerTab />;
            case 'library': return <HealthLibraryTab />;
            case 'schedule': return <Schedule/>;
            case 'notifications': return <NotificationsTab />;
            case 'family-id': return <FamilyIdGenerator currentLanguage={currentLanguage} />;
            case 'family-records': return <UpdateFamilyRecords currentLanguage={currentLanguage} />;
            default: return <DashboardTab />;
        }
    };
    if (!isLoggedIn) {
        return <LoginPage onLogin={handleLogin} currentLanguage={currentLanguage} />;
    }
    return (
        <div className="chikitsa-mitra-app">
            <header className="app-header">
                <div className="header-content">
                    <div className="header-left">
                        <button
                            className="mobile-menu-btn"
                            onClick={() => setMobileMenuOpen(!mobileMenuOpen)}
                        >
                            {mobileMenuOpen ? <X size={24} /> : <Menu size={24} />}
                        </button>
                        <div className="logo">
                            <h1 className="app-title">{translations[currentLanguage].appTitle}</h1>
                        </div>
                    </div>
              
                    <div className="header-right">
                        <div className="search-bar">
                            <Search size={18} />
                            <input
                                type="text"
                                placeholder={translations[currentLanguage].searchPlaceholder}
                                value={searchTerm}
                                onChange={(e) => setSearchTerm(e.target.value)}
                            />
                        </div>
                  
                        <div className="header-actions">
                           <div className="language-selector">
  <Languages size={18} />
  <select
    value={currentLanguage}
    onChange={(e) => switchLanguage(e.target.value)}
  >
    <option value="en">English</option>
    <option value="hi">‡§π‡§ø‡§Ç‡§¶‡•Ä</option>
    <option value="pa">‡®™‡©∞‡®ú‡®æ‡®¨‡©Ä</option>
    <option value="te">‡∞§‡±Ü‡∞≤‡±Å‡∞ó‡±Å</option>
  </select>
</div>
                      
                            <div className="notification-wrapper">
                                <button
                                    className="notification-btn"
                                    onClick={() => setActiveTab('notifications')}
                                >
                                    <Bell size={20} />
                                    {notifications.filter(n => !n.read).length > 0 && (
                                        <span className="notification-badge">
                                            {notifications.filter(n => !n.read).length}
                                        </span>
                                    )}
                                </button>
                            </div>
                      
                            <div className="user-profile">
                                <div className="user-avatar">
                                    {user?.name?.charAt(0)}
                                </div>
                                <div className="user-info">
                                    <span className="user-name">{user?.name}</span>
                                    <span className="user-role">{user?.designation}</span>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </header>
            <div className="app-layout">
                <nav className={`sidebar ${mobileMenuOpen ? 'mobile-open' : ''}`}>
                    <div className="sidebar-content">
                        <div className="sidebar-menu">
  <button className={`menu-item ${activeTab === 'dashboard' ? 'active' : ''}`}
    onClick={() => setActiveTab('dashboard')}>
    <div className="menu-icon"><Home size={20} /></div>
    <span>{translations[currentLanguage].dashboard}</span>
  </button>
  <button className={`menu-item ${activeTab === 'patients' ? 'active' : ''}`}
    onClick={handleHealthRecord}>
    <div className="menu-icon"><User size={20} /></div>
    <span>{translations[currentLanguage].updateHealthRecord}</span>
  </button>
  <button className="menu-item" onClick={handleRegisterPatient}>
    <div className="menu-icon"><UserPlus size={20} /></div>
    <span>{translations[currentLanguage].registerPatient}</span>
  </button>
  <button className={`menu-item ${activeTab === 'family-id' ? 'active' : ''}`}
    onClick={() => setActiveTab('family-id')}>
    <div className="menu-icon"><FolderPlus size={20} /></div>
    <span>{translations[currentLanguage].generateFamilyId}</span>
  </button>
  <button className={`menu-item ${showChatbot ? 'active' : ''}`}
    onClick={() => setShowChatbot(true)}>
    <div className="menu-icon"><Stethoscope size={20} /></div>
    <span>{translations[currentLanguage].symptomCheck}</span>
  </button>
  <button className={`menu-item ${activeTab === 'medicine' ? 'active' : ''}`}
    onClick={() => setActiveTab('medicine')}>
    <div className="menu-icon"><Pill size={20} /></div>
    <span>{translations[currentLanguage].medicineStock}</span>
  </button>
  <button className={`menu-item ${activeTab === 'library' ? 'active' : ''}`}
    onClick={() => setActiveTab('library')}>
    <div className="menu-icon"><BookOpen size={20} /></div>
    <span>{translations[currentLanguage].healthLibrary}</span>
  </button>
  <button className={`menu-item ${activeTab === 'schedule' ? 'active' : ''}`}
    onClick={() => setActiveTab('schedule')}>
    <div className="menu-icon"><Calendar size={20} /></div>
    <span>{translations[currentLanguage].visitSchedule}</span>
  </button>
</div>
                       <div className="sidebar-footer">
  <button className="menu-item">
    <div className="menu-icon">
      <Settings size={20} />
    </div>
    <span>{translations[currentLanguage].settings}</span>
  </button>
  <button className="menu-item logout" onClick={handleLogout}>
    <div className="menu-icon">
      <LogOut size={20} />
    </div>
    <span>{translations[currentLanguage].logout}</span>
  </button>
</div>
                    </div>
                </nav>
                <main className="main-content">
                    {renderTabContent()}
                </main>
            </div>
            <ChatBot isOpen={showChatbot} onClose={() => setShowChatbot(false)} currentLanguage={currentLanguage} />
            <nav className="bottom-nav">
                <button
                    className={`nav-item ${activeTab === 'dashboard' ? 'active' : ''}`}
                    onClick={() => setActiveTab('dashboard')}
                >
                    <Home size={20} />
                    <span>{translations[currentLanguage].home}</span>
                </button>
                <button
                    className={`nav-item ${activeTab === 'patients' ? 'active' : ''}`}
                    onClick={handleHealthRecord}
                >
                    <User size={20} />
                    <span>{translations[currentLanguage].records}</span>
                </button>
                <button
                    className={`nav-item ${activeTab === 'family-id' ? 'active' : ''}`}
                    onClick={() => setActiveTab('family-id')}
                >
                    <FolderPlus size={20} />
                    <span>{translations[currentLanguage].familyIdNav}</span>
                </button>
                <button
                    className={`nav-item ${activeTab === 'schedule' ? 'active' : ''}`}
                    onClick={() => setActiveTab('schedule')}
                >
                    <Calendar size={20} />
                    <span>{translations[currentLanguage].scheduleNav}</span>
                </button>
            </nav>
        </div>
    );
};
export default AshaConnectApp;